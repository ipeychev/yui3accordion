<div class="highlight"><pre><span class="c">/**</span>
<span class="c"> * Provides the Accordion class</span>
<span class="c"> *</span>
<span class="c"> * @module accordion</span>
<span class="c"> */</span>

<span class="p">(</span><span class="k">function</span><span class="p">(){</span>

<span class="c">/**</span>
<span class="c"> * Create an AccordionItem widget.</span>
<span class="c"> * </span>
<span class="c"> * @param config {Object} Object literal specifying AccordionItem configuration properties.</span>
<span class="c"> *</span>
<span class="c"> * @class AccordionItem</span>
<span class="c"> * @constructor</span>
<span class="c"> * @extends Widget</span>
<span class="c"> */</span>

<span class="k">function</span> <span class="nx">AccordionItem</span><span class="p">(</span> <span class="nx">config</span> <span class="p">){</span>
    <span class="nx">AccordionItem</span><span class="p">.</span><span class="nx">superclass</span><span class="p">.</span><span class="nx">constructor</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span> <span class="k">this</span><span class="o">,</span> <span class="nx">arguments</span> <span class="p">);</span>
<span class="p">}</span>

<span class="c">// Local constants</span>
<span class="k">var</span> <span class="nx">Lang</span> <span class="o">=</span> <span class="nx">Y</span><span class="p">.</span><span class="nx">Lang</span><span class="o">,</span>
    <span class="nx">Base</span> <span class="o">=</span> <span class="nx">Y</span><span class="p">.</span><span class="nx">Base</span><span class="o">,</span>
    <span class="nx">Node</span> <span class="o">=</span> <span class="nx">Y</span><span class="p">.</span><span class="nx">Node</span><span class="o">,</span>
    <span class="nx">JSON</span> <span class="o">=</span> <span class="nx">Y</span><span class="p">.</span><span class="nx">JSON</span><span class="o">,</span>
    <span class="nx">WidgetStdMod</span> <span class="o">=</span> <span class="nx">Y</span><span class="p">.</span><span class="nx">WidgetStdMod</span><span class="o">,</span>
    <span class="nx">AccItemName</span> <span class="o">=</span> <span class="s2">&quot;accordion-item&quot;</span><span class="o">,</span>
    <span class="nx">getCN</span> <span class="o">=</span> <span class="nx">Y</span><span class="p">.</span><span class="nx">ClassNameManager</span><span class="p">.</span><span class="nx">getClassName</span><span class="o">,</span>
    
    <span class="nx">C_ICONEXPANDED_EXPANDING</span> <span class="o">=</span> <span class="nx">getCN</span><span class="p">(</span> <span class="nx">AccItemName</span><span class="o">,</span> <span class="s2">&quot;iconexpanded&quot;</span><span class="o">,</span> <span class="s2">&quot;expanding&quot;</span> <span class="p">)</span><span class="o">,</span>
    <span class="nx">C_ICONEXPANDED_COLLAPSING</span> <span class="o">=</span> <span class="nx">getCN</span><span class="p">(</span> <span class="nx">AccItemName</span><span class="o">,</span> <span class="s2">&quot;iconexpanded&quot;</span><span class="o">,</span> <span class="s2">&quot;collapsing&quot;</span> <span class="p">)</span><span class="o">,</span>

    <span class="nx">C_ICON</span> <span class="o">=</span> <span class="nx">getCN</span><span class="p">(</span> <span class="nx">AccItemName</span><span class="o">,</span> <span class="s2">&quot;icon&quot;</span> <span class="p">)</span><span class="o">,</span>
    <span class="nx">C_LABEL</span> <span class="o">=</span> <span class="nx">getCN</span><span class="p">(</span> <span class="nx">AccItemName</span><span class="o">,</span> <span class="s2">&quot;label&quot;</span> <span class="p">)</span><span class="o">,</span>
    <span class="nx">C_ICONALWAYSVISIBLE</span> <span class="o">=</span> <span class="nx">getCN</span><span class="p">(</span> <span class="nx">AccItemName</span><span class="o">,</span> <span class="s2">&quot;iconalwaysvisible&quot;</span> <span class="p">)</span><span class="o">,</span>
    <span class="nx">C_ICONSCONTAINER</span> <span class="o">=</span> <span class="nx">getCN</span><span class="p">(</span> <span class="nx">AccItemName</span><span class="o">,</span> <span class="s2">&quot;icons&quot;</span> <span class="p">)</span><span class="o">,</span>
    <span class="nx">C_ICONEXPANDED</span> <span class="o">=</span> <span class="nx">getCN</span><span class="p">(</span> <span class="nx">AccItemName</span><span class="o">,</span> <span class="s2">&quot;iconexpanded&quot;</span> <span class="p">)</span><span class="o">,</span>
    <span class="nx">C_ICONCLOSE</span> <span class="o">=</span> <span class="nx">getCN</span><span class="p">(</span> <span class="nx">AccItemName</span><span class="o">,</span> <span class="s2">&quot;iconclose&quot;</span> <span class="p">)</span><span class="o">,</span>
    <span class="nx">C_ICONCLOSE_HIDDEN</span> <span class="o">=</span> <span class="nx">getCN</span><span class="p">(</span> <span class="nx">AccItemName</span><span class="o">,</span> <span class="s2">&quot;iconclose&quot;</span><span class="o">,</span> <span class="s2">&quot;hidden&quot;</span> <span class="p">)</span><span class="o">,</span>

    <span class="nx">C_ICONEXPANDED_ON</span> <span class="o">=</span> <span class="nx">getCN</span><span class="p">(</span> <span class="nx">AccItemName</span><span class="o">,</span> <span class="s2">&quot;iconexpanded&quot;</span><span class="o">,</span> <span class="s2">&quot;on&quot;</span> <span class="p">)</span><span class="o">,</span>
    <span class="nx">C_ICONEXPANDED_OFF</span> <span class="o">=</span> <span class="nx">getCN</span><span class="p">(</span> <span class="nx">AccItemName</span><span class="o">,</span> <span class="s2">&quot;iconexpanded&quot;</span><span class="o">,</span> <span class="s2">&quot;off&quot;</span> <span class="p">)</span><span class="o">,</span>

    <span class="nx">C_ICONALWAYSVISIBLE_ON</span> <span class="o">=</span> <span class="nx">getCN</span><span class="p">(</span> <span class="nx">AccItemName</span><span class="o">,</span> <span class="s2">&quot;iconalwaysvisible&quot;</span><span class="o">,</span> <span class="s2">&quot;on&quot;</span> <span class="p">)</span><span class="o">,</span>
    <span class="nx">C_ICONALWAYSVISIBLE_OFF</span> <span class="o">=</span> <span class="nx">getCN</span><span class="p">(</span> <span class="nx">AccItemName</span><span class="o">,</span> <span class="s2">&quot;iconalwaysvisible&quot;</span><span class="o">,</span> <span class="s2">&quot;off&quot;</span> <span class="p">)</span><span class="o">,</span>

    <span class="nx">C_EXPANDED</span> <span class="o">=</span>  <span class="nx">getCN</span><span class="p">(</span> <span class="nx">AccItemName</span><span class="o">,</span> <span class="s2">&quot;expanded&quot;</span> <span class="p">)</span><span class="o">,</span>
    <span class="nx">C_CLOSABLE</span> <span class="o">=</span>  <span class="nx">getCN</span><span class="p">(</span> <span class="nx">AccItemName</span><span class="o">,</span> <span class="s2">&quot;closable&quot;</span> <span class="p">)</span><span class="o">,</span>
    <span class="nx">C_ALWAYSVISIBLE</span> <span class="o">=</span>  <span class="nx">getCN</span><span class="p">(</span> <span class="nx">AccItemName</span><span class="o">,</span> <span class="s2">&quot;alwaysvisible&quot;</span> <span class="p">)</span><span class="o">,</span>
    <span class="nx">C_CONTENTHEIGHT</span> <span class="o">=</span>  <span class="nx">getCN</span><span class="p">(</span> <span class="nx">AccItemName</span><span class="o">,</span> <span class="s2">&quot;contentheight&quot;</span> <span class="p">)</span><span class="o">,</span>

    <span class="nx">TITLE</span> <span class="o">=</span> <span class="s2">&quot;title&quot;</span><span class="o">,</span>
    <span class="nx">STRINGS</span> <span class="o">=</span> <span class="s2">&quot;strings&quot;</span><span class="o">,</span>
    <span class="nx">CONTENT_BOX</span> <span class="o">=</span> <span class="s2">&quot;contentBox&quot;</span><span class="o">,</span>
    <span class="nx">RENDERED</span> <span class="o">=</span> <span class="s2">&quot;rendered&quot;</span><span class="o">,</span>
    <span class="nx">CLASS_NAME</span> <span class="o">=</span> <span class="s2">&quot;className&quot;</span><span class="o">,</span>
    <span class="nx">AUTO</span> <span class="o">=</span> <span class="s2">&quot;auto&quot;</span><span class="o">,</span>
    <span class="nx">STRETCH</span> <span class="o">=</span> <span class="s2">&quot;stretch&quot;</span><span class="o">,</span>
    <span class="nx">FIXED</span> <span class="o">=</span> <span class="s2">&quot;fixed&quot;</span><span class="o">,</span>
    <span class="nx">HEADER_SELECTOR</span> <span class="o">=</span> <span class="s2">&quot;.yui-widget-hd&quot;</span><span class="o">,</span>
    <span class="nx">DOT</span> <span class="o">=</span> <span class="s2">&quot;.&quot;</span><span class="o">,</span>
    <span class="nx">HEADER_SELECTOR_SUB</span> <span class="o">=</span> <span class="s2">&quot;.yui-widget-hd &quot;</span> <span class="o">+</span> <span class="nx">DOT</span><span class="o">,</span>
    <span class="nx">INNER_HTML</span> <span class="o">=</span> <span class="s2">&quot;innerHTML&quot;</span><span class="o">,</span>
    <span class="nx">ICONS_CONTAINER</span> <span class="o">=</span> <span class="s2">&quot;iconsContainer&quot;</span><span class="o">,</span>
    <span class="nx">ICON</span> <span class="o">=</span> <span class="s2">&quot;icon&quot;</span><span class="o">,</span>
    <span class="nx">NODE_LABEL</span> <span class="o">=</span> <span class="s2">&quot;nodeLabel&quot;</span><span class="o">,</span>
    <span class="nx">ICON_ALWAYSVISIBLE</span> <span class="o">=</span> <span class="s2">&quot;iconAlwaysVisible&quot;</span><span class="o">,</span>
    <span class="nx">ICON_EXPANDED</span> <span class="o">=</span> <span class="s2">&quot;iconExpanded&quot;</span><span class="o">,</span>
    <span class="nx">ICON_CLOSE</span> <span class="o">=</span> <span class="s2">&quot;iconClose&quot;</span><span class="o">,</span>
    <span class="nx">HREF</span> <span class="o">=</span> <span class="s2">&quot;href&quot;</span><span class="o">,</span>
    <span class="nx">HREF_VALUE</span> <span class="o">=</span> <span class="s2">&quot;#&quot;</span><span class="o">,</span>
    <span class="nx">YUICONFIG</span> <span class="o">=</span> <span class="s2">&quot;yuiConfig&quot;</span><span class="o">,</span>
    <span class="nx">HEADER_CONTENT</span> <span class="o">=</span> <span class="s2">&quot;headerContent&quot;</span><span class="o">;</span>

<span class="c">/**</span>
<span class="c"> *  Static property provides a string to identify the class.</span>
<span class="c"> *</span>
<span class="c"> * @property AccordionItem.NAME</span>
<span class="c"> * @type String</span>
<span class="c"> * @static</span>
<span class="c"> */</span>
<span class="nx">AccordionItem</span><span class="p">.</span><span class="nx">NAME</span> <span class="o">=</span> <span class="nx">AccItemName</span><span class="o">;</span>

<span class="c">/**</span>
<span class="c"> * Static property used to define the default attribute </span>
<span class="c"> * configuration for the Accordion.</span>
<span class="c"> * </span>
<span class="c"> * @property Accordion.ATTRS</span>
<span class="c"> * @type Object</span>
<span class="c"> * @static</span>
<span class="c"> */</span>
<span class="nx">AccordionItem</span><span class="p">.</span><span class="nx">ATTRS</span> <span class="o">=</span> <span class="p">{</span>

    <span class="c">/**</span>
<span class="c">     * @description Item&#39;s icon</span>
<span class="c">     *</span>
<span class="c">     * @attribute icon</span>
<span class="c">     * @default null</span>
<span class="c">     * @type Node</span>
<span class="c">     */</span>
    <span class="nx">icon</span><span class="o">:</span> <span class="p">{</span>
        <span class="nx">value</span><span class="o">:</span> <span class="kc">null</span><span class="o">,</span>
        <span class="nx">validator</span><span class="o">:</span> <span class="k">function</span><span class="p">(</span> <span class="nx">value</span> <span class="p">){</span>
            <span class="k">return</span> <span class="nx">value</span> <span class="k">instanceof</span> <span class="nx">Node</span><span class="o">;</span>
        <span class="p">}</span>
    <span class="p">}</span><span class="o">,</span>

    <span class="c">/**</span>
<span class="c">     * @description The label of the item</span>
<span class="c">     *</span>
<span class="c">     * @attribute label</span>
<span class="c">     * @default &quot;&amp;#160;&quot;</span>
<span class="c">     * @type String</span>
<span class="c">     */</span>
    <span class="k">label</span><span class="o">:</span> <span class="p">{</span>
        <span class="nx">value</span><span class="o">:</span> <span class="s2">&quot;&amp;#160;&quot;</span><span class="o">,</span>
        <span class="nx">validator</span><span class="o">:</span> <span class="nx">Lang</span><span class="p">.</span><span class="nx">isString</span>
    <span class="p">}</span><span class="o">,</span>

    <span class="c">/**</span>
<span class="c">     * @description The node, contains label</span>
<span class="c">     *</span>
<span class="c">     * @attribute nodeLabel</span>
<span class="c">     * @default null</span>
<span class="c">     * @type Node</span>
<span class="c">     */</span>
    <span class="nx">nodeLabel</span><span class="o">:</span> <span class="p">{</span>
        <span class="nx">value</span><span class="o">:</span> <span class="kc">null</span><span class="o">,</span>
        <span class="nx">validator</span><span class="o">:</span> <span class="k">function</span><span class="p">(</span> <span class="nx">value</span> <span class="p">){</span>
            <span class="k">return</span> <span class="nx">value</span> <span class="k">instanceof</span> <span class="nx">Node</span><span class="o">;</span>
        <span class="p">}</span>
    <span class="p">}</span><span class="o">,</span>


    <span class="c">/**</span>
<span class="c">     * @description The container of iconAlwaysVisible, iconExpanded and iconClose</span>
<span class="c">     *</span>
<span class="c">     * @attribute iconsContainer</span>
<span class="c">     * @default null</span>
<span class="c">     * @type Node</span>
<span class="c">     */</span>
    <span class="nx">iconsContainer</span><span class="o">:</span> <span class="p">{</span>
        <span class="nx">value</span><span class="o">:</span> <span class="kc">null</span><span class="o">,</span>
        <span class="nx">validator</span><span class="o">:</span> <span class="k">function</span><span class="p">(</span> <span class="nx">value</span> <span class="p">){</span>
            <span class="k">return</span> <span class="nx">value</span> <span class="k">instanceof</span> <span class="nx">Node</span><span class="o">;</span>
        <span class="p">}</span>
    <span class="p">}</span><span class="o">,</span>

    <span class="c">/**</span>
<span class="c">     * @description Icon expanded</span>
<span class="c">     *</span>
<span class="c">     * @attribute iconExpanded</span>
<span class="c">     * @default null</span>
<span class="c">     * @type Node</span>
<span class="c">     */</span>
    <span class="nx">iconExpanded</span><span class="o">:</span> <span class="p">{</span>
        <span class="nx">value</span><span class="o">:</span> <span class="kc">null</span><span class="o">,</span>
        <span class="nx">validator</span><span class="o">:</span> <span class="k">function</span><span class="p">(</span> <span class="nx">value</span> <span class="p">){</span>
            <span class="k">return</span> <span class="nx">value</span> <span class="k">instanceof</span> <span class="nx">Node</span><span class="o">;</span>
        <span class="p">}</span>
    <span class="p">}</span><span class="o">,</span>


    <span class="c">/**</span>
<span class="c">     * @description Icon always visible</span>
<span class="c">     *</span>
<span class="c">     * @attribute iconAlwaysVisible</span>
<span class="c">     * @default null</span>
<span class="c">     * @type Node</span>
<span class="c">     */</span>
    <span class="nx">iconAlwaysVisible</span><span class="o">:</span> <span class="p">{</span>
        <span class="nx">value</span><span class="o">:</span> <span class="kc">null</span><span class="o">,</span>
        <span class="nx">validator</span><span class="o">:</span> <span class="k">function</span><span class="p">(</span> <span class="nx">value</span> <span class="p">){</span>
            <span class="k">return</span> <span class="nx">value</span> <span class="k">instanceof</span> <span class="nx">Node</span><span class="o">;</span>
        <span class="p">}</span>
    <span class="p">}</span><span class="o">,</span>


    <span class="c">/**</span>
<span class="c">     * @description Icon close, or null if the item is not closable</span>
<span class="c">     *</span>
<span class="c">     * @attribute iconClose</span>
<span class="c">     * @default null</span>
<span class="c">     * @type Node</span>
<span class="c">     */</span>
    <span class="nx">iconClose</span><span class="o">:</span> <span class="p">{</span>
        <span class="nx">value</span><span class="o">:</span> <span class="kc">null</span><span class="o">,</span>
        <span class="nx">validator</span><span class="o">:</span> <span class="k">function</span><span class="p">(</span> <span class="nx">value</span> <span class="p">){</span>
            <span class="k">return</span> <span class="nx">value</span> <span class="k">instanceof</span> <span class="nx">Node</span><span class="o">;</span>
        <span class="p">}</span>
    <span class="p">}</span><span class="o">,</span>

    <span class="c">/**</span>
<span class="c">     * @description Get/Set the expanded status of the item</span>
<span class="c">     *</span>
<span class="c">     * @attribute expanded</span>
<span class="c">     * @default false</span>
<span class="c">     * @type Boolean</span>
<span class="c">     */</span>
    <span class="nx">expanded</span><span class="o">:</span> <span class="p">{</span>
        <span class="nx">value</span><span class="o">:</span> <span class="kc">false</span><span class="o">,</span>
        <span class="nx">validator</span><span class="o">:</span> <span class="nx">Lang</span><span class="p">.</span><span class="nx">isBoolean</span>
    <span class="p">}</span><span class="o">,</span>

    <span class="c">/**</span>
<span class="c">     * @description Describe the method, which will be used when expanding/collapsing</span>
<span class="c">     * the item. The value should be an object with at least one property (&quot;method&quot;):</span>
<span class="c">     *  &lt;dl&gt;</span>
<span class="c">     *      &lt;dt&gt;method&lt;/dt&gt;</span>
<span class="c">     *          &lt;dd&gt;The method can be one of these: &quot;auto&quot;, &quot;fixed&quot; and &quot;stretch&quot;&lt;/dd&gt;</span>
<span class="c">     *      &lt;dt&gt;height&lt;/dt&gt;</span>
<span class="c">     *          &lt;dd&gt;Must be set only if method&#39;s value is &quot;fixed&quot;&lt;/dd&gt;</span>
<span class="c">     *  &lt;/dl&gt;</span>
<span class="c">     *</span>
<span class="c">     * @attribute contentHeight</span>
<span class="c">     * @default auto</span>
<span class="c">     * @type Object</span>
<span class="c">     */</span>
    <span class="nx">contentHeight</span><span class="o">:</span> <span class="p">{</span>
        <span class="nx">value</span><span class="o">:</span> <span class="p">{</span>
            <span class="nx">method</span><span class="o">:</span> <span class="nx">AUTO</span>
        <span class="p">}</span><span class="o">,</span>
        <span class="nx">validator</span><span class="o">:</span> <span class="k">function</span><span class="p">(</span> <span class="nx">value</span> <span class="p">){</span>
            <span class="k">if</span><span class="p">(</span> <span class="nx">Lang</span><span class="p">.</span><span class="nx">isObject</span><span class="p">(</span> <span class="nx">value</span> <span class="p">)</span> <span class="p">){</span>
                <span class="k">if</span><span class="p">(</span> <span class="nx">value</span><span class="p">.</span><span class="nx">method</span> <span class="o">===</span> <span class="nx">AUTO</span> <span class="p">){</span>
                    <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
                <span class="p">}</span> <span class="k">else</span> <span class="k">if</span><span class="p">(</span> <span class="nx">value</span><span class="p">.</span><span class="nx">method</span> <span class="o">===</span> <span class="nx">STRETCH</span> <span class="p">){</span>
                    <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
                <span class="p">}</span> <span class="k">else</span> <span class="k">if</span><span class="p">(</span> <span class="nx">value</span><span class="p">.</span><span class="nx">method</span> <span class="o">===</span> <span class="nx">FIXED</span> <span class="o">&amp;&amp;</span> <span class="nx">Lang</span><span class="p">.</span><span class="nx">isNumber</span><span class="p">(</span> <span class="nx">value</span><span class="p">.</span><span class="nx">height</span> <span class="p">)</span> <span class="o">&amp;&amp;</span>
                    <span class="nx">value</span><span class="p">.</span><span class="nx">height</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="p">){</span>
                    <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
                <span class="p">}</span>
            <span class="p">}</span>
            
            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
        <span class="p">}</span>
    <span class="p">}</span><span class="o">,</span>

    <span class="c">/**</span>
<span class="c">     * @description Get/Set the expanded status of the item</span>
<span class="c">     *</span>
<span class="c">     * @attribute alwaysVisible</span>
<span class="c">     * @default false</span>
<span class="c">     * @type Boolean</span>
<span class="c">     */</span>
    <span class="nx">alwaysVisible</span><span class="o">:</span> <span class="p">{</span>
        <span class="nx">value</span><span class="o">:</span> <span class="kc">false</span><span class="o">,</span>
        <span class="nx">validator</span><span class="o">:</span> <span class="nx">Lang</span><span class="p">.</span><span class="nx">isBoolean</span>
    <span class="p">}</span><span class="o">,</span>
    
    
    <span class="c">/**</span>
<span class="c">     * @description Get/Set the animaton specific settings. By default there are no any settings.</span>
<span class="c">     * If set, they will overwrite Accordion&#39;s animation settings</span>
<span class="c">     *</span>
<span class="c">     * @attribute animation</span>
<span class="c">     * @default {}</span>
<span class="c">     * @type Object</span>
<span class="c">     */</span>
    <span class="nx">animation</span><span class="o">:</span> <span class="p">{</span>
        <span class="nx">value</span><span class="o">:</span> <span class="p">{}</span><span class="o">,</span>
        <span class="nx">validator</span><span class="o">:</span> <span class="nx">Lang</span><span class="p">.</span><span class="nx">isObject</span>
    <span class="p">}</span><span class="o">,</span>

    <span class="c">/**</span>
<span class="c">     * @description Provides client side string localization support.</span>
<span class="c">     *</span>
<span class="c">     * @attribute strings</span>
<span class="c">     * @default Object English messages</span>
<span class="c">     * @type Object</span>
<span class="c">     */</span>
    <span class="nx">strings</span><span class="o">:</span> <span class="p">{</span>
        <span class="nx">value</span><span class="o">:</span> <span class="p">{</span>
            <span class="nx">title_always_visible_off</span><span class="o">:</span> <span class="s2">&quot;Click to set always visible on&quot;</span><span class="o">,</span>
            <span class="nx">title_always_visible_on</span><span class="o">:</span> <span class="s2">&quot;Click to set always visible off&quot;</span><span class="o">,</span>
            <span class="nx">title_iconexpanded_off</span><span class="o">:</span> <span class="s2">&quot;Click to expand&quot;</span><span class="o">,</span>
            <span class="nx">title_iconexpanded_on</span><span class="o">:</span> <span class="s2">&quot;Click to collapse&quot;</span><span class="o">,</span>
            <span class="nx">title_iconclose</span><span class="o">:</span> <span class="s2">&quot;Click to close&quot;</span>
        <span class="p">}</span>
    <span class="p">}</span><span class="o">,</span>

    <span class="c">/**</span>
<span class="c">     * @description Flag, indicated whether the item can be closed by user, or not</span>
<span class="c">     * If yes, there will be placed close icon, otherwise not</span>
<span class="c">     *</span>
<span class="c">     * @attribute closable</span>
<span class="c">     * @default false</span>
<span class="c">     * @type Boolean</span>
<span class="c">     */</span>
    <span class="nx">closable</span><span class="o">:</span> <span class="p">{</span>
        <span class="nx">value</span><span class="o">:</span> <span class="kc">false</span><span class="o">,</span>
        <span class="nx">validator</span><span class="o">:</span> <span class="nx">Lang</span><span class="p">.</span><span class="nx">isBoolean</span>
    <span class="p">}</span>
<span class="p">};</span>


<span class="c">/**</span>
<span class="c"> * Static Object hash used to capture existing markup for progressive</span>
<span class="c"> * enhancement.  Keys correspond to config attribute names and values</span>
<span class="c"> * are selectors used to inspect the contentBox for an existing node</span>
<span class="c"> * structure.</span>
<span class="c"> *</span>
<span class="c"> * @property AccordionItem.HTML_PARSER</span>
<span class="c"> * @type Object</span>
<span class="c"> * @protected</span>
<span class="c"> * @static</span>
<span class="c"> */</span>
<span class="nx">AccordionItem</span><span class="p">.</span><span class="nx">HTML_PARSER</span> <span class="o">=</span> <span class="p">{</span>

    <span class="nx">icon</span><span class="o">:</span> <span class="k">function</span><span class="p">(</span> <span class="nx">contentBox</span> <span class="p">){</span>
        <span class="k">var</span> <span class="nx">node</span><span class="o">,</span> <span class="nx">iconSelector</span><span class="o">;</span>

        <span class="nx">iconSelector</span> <span class="o">=</span> <span class="nx">HEADER_SELECTOR_SUB</span> <span class="o">+</span> <span class="nx">C_ICON</span><span class="o">;</span>
        <span class="nx">node</span> <span class="o">=</span> <span class="nx">contentBox</span><span class="p">.</span><span class="nx">query</span><span class="p">(</span> <span class="nx">iconSelector</span> <span class="p">);</span>

        <span class="k">return</span> <span class="nx">node</span><span class="o">;</span>
    <span class="p">}</span><span class="o">,</span>

    <span class="k">label</span><span class="o">:</span> <span class="k">function</span><span class="p">(</span> <span class="nx">contentBox</span> <span class="p">){</span>
        <span class="k">var</span> <span class="nx">node</span><span class="o">,</span> <span class="nx">labelSelector</span><span class="o">,</span> <span class="nx">yuiConfig</span><span class="o">;</span>
        
        <span class="nx">yuiConfig</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">_getConfigDOMAttribute</span><span class="p">(</span> <span class="nx">contentBox</span> <span class="p">);</span>
        
        <span class="k">if</span><span class="p">(</span> <span class="nx">yuiConfig</span> <span class="o">&amp;&amp;</span> <span class="nx">Lang</span><span class="p">.</span><span class="nx">isValue</span><span class="p">(</span> <span class="nx">yuiConfig</span><span class="p">.</span><span class="k">label</span> <span class="p">)</span> <span class="p">){</span>
            <span class="k">return</span> <span class="nx">yuiConfig</span><span class="p">.</span><span class="k">label</span><span class="o">;</span>
        <span class="p">}</span>

        <span class="nx">labelSelector</span> <span class="o">=</span> <span class="nx">HEADER_SELECTOR_SUB</span> <span class="o">+</span> <span class="nx">C_LABEL</span><span class="o">;</span>
        <span class="nx">node</span> <span class="o">=</span> <span class="nx">contentBox</span><span class="p">.</span><span class="nx">query</span><span class="p">(</span> <span class="nx">labelSelector</span> <span class="p">);</span>

        <span class="k">return</span> <span class="p">(</span><span class="nx">node</span><span class="p">)</span> <span class="o">?</span> <span class="nx">node</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span> <span class="nx">INNER_HTML</span> <span class="p">)</span> <span class="o">:</span> <span class="kc">null</span><span class="o">;</span>
    <span class="p">}</span><span class="o">,</span>

    <span class="nx">nodeLabel</span><span class="o">:</span> <span class="k">function</span><span class="p">(</span> <span class="nx">contentBox</span> <span class="p">){</span>
        <span class="k">var</span> <span class="nx">node</span><span class="o">,</span> <span class="nx">labelSelector</span><span class="o">;</span>

        <span class="nx">labelSelector</span> <span class="o">=</span> <span class="nx">HEADER_SELECTOR_SUB</span> <span class="o">+</span> <span class="nx">C_LABEL</span><span class="o">;</span>
        <span class="nx">node</span> <span class="o">=</span> <span class="nx">contentBox</span><span class="p">.</span><span class="nx">query</span><span class="p">(</span> <span class="nx">labelSelector</span> <span class="p">);</span>

        <span class="k">return</span> <span class="nx">node</span><span class="o">;</span>
    <span class="p">}</span><span class="o">,</span>

    <span class="nx">iconsContainer</span><span class="o">:</span>  <span class="k">function</span><span class="p">(</span> <span class="nx">contentBox</span> <span class="p">){</span>
        <span class="k">var</span> <span class="nx">node</span><span class="o">,</span> <span class="nx">iconsContainer</span><span class="o">;</span>

        <span class="nx">iconsContainer</span> <span class="o">=</span> <span class="nx">HEADER_SELECTOR_SUB</span> <span class="o">+</span> <span class="nx">C_ICONSCONTAINER</span><span class="o">;</span>
        <span class="nx">node</span> <span class="o">=</span> <span class="nx">contentBox</span><span class="p">.</span><span class="nx">query</span><span class="p">(</span> <span class="nx">iconsContainer</span> <span class="p">);</span>

        <span class="k">return</span> <span class="nx">node</span><span class="o">;</span>
    <span class="p">}</span><span class="o">,</span>
    
    <span class="nx">iconAlwaysVisible</span><span class="o">:</span> <span class="k">function</span><span class="p">(</span> <span class="nx">contentBox</span> <span class="p">){</span>
        <span class="k">var</span> <span class="nx">node</span><span class="o">,</span> <span class="nx">iconAlwaysVisibleSelector</span><span class="o">;</span>

        <span class="nx">iconAlwaysVisibleSelector</span> <span class="o">=</span> <span class="nx">HEADER_SELECTOR_SUB</span> <span class="o">+</span> <span class="nx">C_ICONALWAYSVISIBLE</span><span class="o">;</span>
        <span class="nx">node</span> <span class="o">=</span> <span class="nx">contentBox</span><span class="p">.</span><span class="nx">query</span><span class="p">(</span> <span class="nx">iconAlwaysVisibleSelector</span> <span class="p">);</span>

        <span class="k">return</span> <span class="nx">node</span><span class="o">;</span>
    <span class="p">}</span><span class="o">,</span>

    <span class="nx">iconExpanded</span><span class="o">:</span> <span class="k">function</span><span class="p">(</span> <span class="nx">contentBox</span> <span class="p">){</span>
        <span class="k">var</span> <span class="nx">node</span><span class="o">,</span> <span class="nx">iconExpandedSelector</span><span class="o">;</span>

        <span class="nx">iconExpandedSelector</span> <span class="o">=</span> <span class="nx">HEADER_SELECTOR_SUB</span> <span class="o">+</span> <span class="nx">C_ICONEXPANDED</span><span class="o">;</span>
        <span class="nx">node</span> <span class="o">=</span> <span class="nx">contentBox</span><span class="p">.</span><span class="nx">query</span><span class="p">(</span> <span class="nx">iconExpandedSelector</span> <span class="p">);</span>

        <span class="k">return</span> <span class="nx">node</span><span class="o">;</span>
    <span class="p">}</span><span class="o">,</span>

    <span class="nx">iconClose</span><span class="o">:</span> <span class="k">function</span><span class="p">(</span> <span class="nx">contentBox</span> <span class="p">){</span>
        <span class="k">var</span> <span class="nx">node</span><span class="o">,</span> <span class="nx">iconCloseSelector</span><span class="o">;</span>

        <span class="nx">iconCloseSelector</span> <span class="o">=</span> <span class="nx">HEADER_SELECTOR_SUB</span> <span class="o">+</span> <span class="nx">C_ICONCLOSE</span><span class="o">;</span>
        <span class="nx">node</span> <span class="o">=</span> <span class="nx">contentBox</span><span class="p">.</span><span class="nx">query</span><span class="p">(</span> <span class="nx">iconCloseSelector</span> <span class="p">);</span>

        <span class="k">return</span> <span class="nx">node</span><span class="o">;</span>
    <span class="p">}</span><span class="o">,</span>

    <span class="nx">expanded</span><span class="o">:</span> <span class="k">function</span><span class="p">(</span> <span class="nx">contentBox</span> <span class="p">){</span>
        <span class="k">var</span> <span class="nx">yuiConfig</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">_getConfigDOMAttribute</span><span class="p">(</span> <span class="nx">contentBox</span> <span class="p">);</span>

        <span class="k">if</span><span class="p">(</span> <span class="nx">yuiConfig</span> <span class="o">&amp;&amp;</span> <span class="nx">Lang</span><span class="p">.</span><span class="nx">isValue</span><span class="p">(</span> <span class="nx">yuiConfig</span><span class="p">.</span><span class="nx">expanded</span> <span class="p">)</span> <span class="p">){</span>
            <span class="k">return</span> <span class="nx">yuiConfig</span><span class="p">.</span><span class="nx">expanded</span><span class="o">;</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="nx">contentBox</span><span class="p">.</span><span class="nx">hasClass</span><span class="p">(</span> <span class="nx">C_EXPANDED</span> <span class="p">);</span>
    <span class="p">}</span><span class="o">,</span>

    <span class="nx">alwaysVisible</span><span class="o">:</span> <span class="k">function</span><span class="p">(</span> <span class="nx">contentBox</span> <span class="p">){</span>
        <span class="k">var</span> <span class="nx">value</span><span class="o">,</span> <span class="nx">yuiConfig</span><span class="o">;</span>

        <span class="nx">yuiConfig</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">_getConfigDOMAttribute</span><span class="p">(</span> <span class="nx">contentBox</span> <span class="p">);</span>

        <span class="k">if</span><span class="p">(</span> <span class="nx">yuiConfig</span> <span class="o">&amp;&amp;</span> <span class="nx">Lang</span><span class="p">.</span><span class="nx">isValue</span><span class="p">(</span> <span class="nx">yuiConfig</span><span class="p">.</span><span class="nx">alwaysVisible</span> <span class="p">)</span> <span class="p">){</span>
            <span class="nx">value</span> <span class="o">=</span> <span class="nx">yuiConfig</span><span class="p">.</span><span class="nx">alwaysVisible</span><span class="o">;</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="nx">value</span> <span class="o">=</span> <span class="nx">contentBox</span><span class="p">.</span><span class="nx">hasClass</span><span class="p">(</span> <span class="nx">C_ALWAYSVISIBLE</span> <span class="p">);</span>
        <span class="p">}</span>

        <span class="k">if</span><span class="p">(</span> <span class="nx">Lang</span><span class="p">.</span><span class="nx">isBoolean</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nx">value</span> <span class="p">){</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span> <span class="s2">&quot;expanded&quot;</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="p">{</span>
                <span class="nx">internalCall</span><span class="o">:</span> <span class="kc">true</span>
            <span class="p">}</span> <span class="p">);</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="nx">value</span><span class="o">;</span>
    <span class="p">}</span><span class="o">,</span>

    <span class="nx">closable</span><span class="o">:</span> <span class="k">function</span><span class="p">(</span> <span class="nx">contentBox</span> <span class="p">){</span>
        <span class="k">var</span> <span class="nx">yuiConfig</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">_getConfigDOMAttribute</span><span class="p">(</span> <span class="nx">contentBox</span> <span class="p">);</span>

        <span class="k">if</span><span class="p">(</span> <span class="nx">yuiConfig</span> <span class="o">&amp;&amp;</span> <span class="nx">Lang</span><span class="p">.</span><span class="nx">isValue</span><span class="p">(</span> <span class="nx">yuiConfig</span><span class="p">.</span><span class="nx">closable</span> <span class="p">)</span> <span class="p">){</span>
            <span class="k">return</span> <span class="nx">yuiConfig</span><span class="p">.</span><span class="nx">closable</span><span class="o">;</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="nx">contentBox</span><span class="p">.</span><span class="nx">hasClass</span><span class="p">(</span> <span class="nx">C_CLOSABLE</span> <span class="p">);</span>
    <span class="p">}</span><span class="o">,</span>

    <span class="nx">contentHeight</span><span class="o">:</span> <span class="k">function</span><span class="p">(</span> <span class="nx">contentBox</span> <span class="p">){</span>
        <span class="k">var</span> <span class="nx">contentHeightClass</span><span class="o">,</span> <span class="nx">classValue</span><span class="o">,</span> <span class="nx">height</span> <span class="o">=</span> <span class="mi">0</span><span class="o">,</span> <span class="nx">i</span><span class="o">,</span> <span class="nx">length</span><span class="o">,</span> <span class="nx">index</span><span class="o">,</span> <span class="nx">chr</span><span class="o">,</span> <span class="nx">yuiConfig</span><span class="o">;</span>

        <span class="nx">yuiConfig</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">_getConfigDOMAttribute</span><span class="p">(</span> <span class="nx">contentBox</span> <span class="p">);</span>

        <span class="k">if</span><span class="p">(</span> <span class="nx">yuiConfig</span> <span class="o">&amp;&amp;</span> <span class="nx">yuiConfig</span><span class="p">.</span><span class="nx">contentHeight</span> <span class="p">){</span>
            <span class="k">return</span> <span class="nx">yuiConfig</span><span class="p">.</span><span class="nx">contentHeight</span><span class="o">;</span>
        <span class="p">}</span>

        <span class="nx">classValue</span> <span class="o">=</span> <span class="nx">contentBox</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span> <span class="nx">CLASS_NAME</span> <span class="p">);</span>

        <span class="nx">contentHeightClass</span> <span class="o">=</span> <span class="nx">C_CONTENTHEIGHT</span> <span class="o">+</span> <span class="s1">&#39;-&#39;</span><span class="o">;</span>

        <span class="nx">index</span> <span class="o">=</span> <span class="nx">classValue</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span> <span class="nx">contentHeightClass</span><span class="o">,</span> <span class="mi">0</span><span class="p">);</span>

        <span class="k">if</span><span class="p">(</span> <span class="nx">index</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="p">){</span>
            <span class="nx">length</span> <span class="o">=</span> <span class="nx">classValue</span><span class="p">.</span><span class="nx">length</span><span class="o">;</span>
            <span class="nx">index</span> <span class="o">+=</span> <span class="nx">contentHeightClass</span><span class="p">.</span><span class="nx">length</span><span class="o">;</span>

            <span class="nx">classValue</span> <span class="o">=</span> <span class="nx">classValue</span><span class="p">.</span><span class="nx">substring</span><span class="p">(</span> <span class="nx">index</span> <span class="p">);</span>

            <span class="k">if</span><span class="p">(</span> <span class="nx">classValue</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span> <span class="sr">/^auto\s*/g</span> <span class="p">)</span> <span class="p">){</span>
                <span class="k">return</span> <span class="p">{</span>
                    <span class="nx">method</span><span class="o">:</span> <span class="nx">AUTO</span>
                <span class="p">};</span>
            <span class="p">}</span> <span class="k">else</span> <span class="k">if</span><span class="p">(</span> <span class="nx">classValue</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span> <span class="sr">/^stretch\s*/g</span> <span class="p">)</span> <span class="p">){</span>
                <span class="k">return</span> <span class="p">{</span>
                    <span class="nx">method</span><span class="o">:</span> <span class="nx">STRETCH</span>
                <span class="p">};</span>
            <span class="p">}</span> <span class="k">else</span> <span class="k">if</span><span class="p">(</span> <span class="nx">classValue</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span> <span class="sr">/^fixed-\d+/g</span> <span class="p">)</span>  <span class="p">){</span>
                <span class="k">for</span><span class="p">(</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">6</span><span class="o">,</span> <span class="nx">length</span> <span class="o">=</span> <span class="nx">classValue</span><span class="p">.</span><span class="nx">length</span><span class="o">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">length</span><span class="o">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">){</span> <span class="c">// 6 = &quot;fixed-&quot;.length</span>
                    <span class="nx">chr</span> <span class="o">=</span> <span class="nx">classValue</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span>
                    <span class="nx">chr</span> <span class="o">=</span> <span class="nb">parseInt</span><span class="p">(</span> <span class="nx">chr</span><span class="o">,</span> <span class="mi">10</span> <span class="p">);</span>

                    <span class="k">if</span><span class="p">(</span> <span class="nx">Lang</span><span class="p">.</span><span class="nx">isNumber</span><span class="p">(</span> <span class="nx">chr</span> <span class="p">)</span> <span class="p">){</span>
                        <span class="nx">height</span> <span class="o">=</span> <span class="p">(</span><span class="nx">height</span> <span class="o">*</span> <span class="mi">10</span><span class="p">)</span> <span class="o">+</span> <span class="nx">chr</span><span class="o">;</span>
                    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                        <span class="k">break</span><span class="o">;</span>
                    <span class="p">}</span>
                <span class="p">}</span>

                <span class="k">return</span> <span class="p">{</span>
                    <span class="nx">method</span><span class="o">:</span> <span class="nx">FIXED</span><span class="o">,</span>
                    <span class="nx">height</span><span class="o">:</span> <span class="nx">height</span>
                <span class="p">};</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
    <span class="p">}</span>
<span class="p">};</span>


 <span class="c">/**</span>
<span class="c">  * The template HTML strings for each of header components.</span>
<span class="c">  * e.g.</span>
<span class="c">  * &lt;pre&gt;</span>
<span class="c">  *    {</span>
<span class="c">  *       icon : &#39;&amp;lt;a class=&quot;yui-accordion-item-icon&quot;&amp;gt;&amp;lt;/a&amp;gt;&#39;,</span>
<span class="c">  *       label: &#39;&amp;lt;a href=&quot;#&quot; class=&quot;yui-accordion-item-label&quot;&amp;gt;&amp;lt;/a&amp;gt;&#39;,</span>
<span class="c">  *       iconsContainer: &#39;&amp;lt;div class=&quot;yui-accordion-item-icons&quot;&amp;gt;&amp;lt;/div&amp;gt;&#39;,</span>
<span class="c">  *       iconAlwaysVisible: &#39;&amp;lt;a href=&quot;#&quot; class=&quot;yui-accordion-item-iconalwaysvisible&quot;&amp;gt;&amp;lt;/a&amp;gt;&#39;,</span>
<span class="c">  *       iconExpanded: &#39;&amp;lt;a href=&quot;#&quot; class=&quot;yui-accordion-item-iconexpanded&quot;&amp;gt;&amp;lt;/a&amp;gt;&#39;,</span>
<span class="c">  *       iconClose: &#39;&amp;lt;a href=&quot;#&quot; class=&quot;yui-accordion-item-iconclose yui-accordion-item-iconclose-hidden&quot;&amp;gt;&amp;lt;/a&amp;gt;&#39;</span>
<span class="c">  *    }</span>
<span class="c">  * &lt;/pre&gt;</span>
<span class="c">  * @property WidgetStdMod.TEMPLATES</span>
<span class="c">  * @type Object</span>
<span class="c">  */</span>
<span class="nx">AccordionItem</span><span class="p">.</span><span class="nx">TEMPLATES</span> <span class="o">=</span> <span class="p">{</span>
     <span class="nx">icon</span> <span class="o">:</span> <span class="s1">&#39;&lt;a class=&quot;&#39;</span> <span class="o">+</span> <span class="nx">C_ICON</span> <span class="o">+</span> <span class="s1">&#39;&quot;&gt;&lt;/a&gt;&#39;</span><span class="o">,</span>
     <span class="k">label</span><span class="o">:</span> <span class="s1">&#39;&lt;a href=&quot;#&quot; class=&quot;&#39;</span> <span class="o">+</span> <span class="nx">C_LABEL</span> <span class="o">+</span> <span class="s1">&#39;&quot;&gt;&lt;/a&gt;&#39;</span><span class="o">,</span>
     <span class="nx">iconsContainer</span><span class="o">:</span> <span class="s1">&#39;&lt;div class=&quot;&#39;</span> <span class="o">+</span> <span class="nx">C_ICONSCONTAINER</span> <span class="o">+</span> <span class="s1">&#39;&quot;&gt;&lt;/div&gt;&#39;</span><span class="o">,</span>
     <span class="nx">iconExpanded</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;&lt;a href=&quot;#&quot; class=&quot;&#39;</span><span class="o">,</span> <span class="nx">C_ICONEXPANDED</span><span class="o">,</span> <span class="s1">&#39; &#39;</span><span class="o">,</span> <span class="nx">C_ICONEXPANDED_OFF</span><span class="o">,</span> <span class="s1">&#39;&quot;&gt;&lt;/a&gt;&#39;</span><span class="p">].</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">)</span><span class="o">,</span>
     <span class="nx">iconAlwaysVisible</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;&lt;a href=&quot;#&quot; class=&quot;&#39;</span><span class="o">,</span> <span class="nx">C_ICONALWAYSVISIBLE</span><span class="o">,</span> <span class="s1">&#39; &#39;</span><span class="o">,</span>  <span class="nx">C_ICONALWAYSVISIBLE_OFF</span><span class="o">,</span> <span class="s1">&#39;&quot;&gt;&lt;/a&gt;&#39;</span><span class="p">].</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">)</span><span class="o">,</span>
     <span class="nx">iconClose</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;&lt;a href=&quot;#&quot; class=&quot;&#39;</span><span class="o">,</span> <span class="nx">C_ICONCLOSE</span><span class="o">,</span> <span class="s1">&#39; &#39;</span><span class="o">,</span> <span class="nx">C_ICONCLOSE_HIDDEN</span><span class="o">,</span> <span class="s1">&#39;&quot;&gt;&lt;/a&gt;&#39;</span><span class="p">].</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">)</span>
<span class="p">};</span>


<span class="c">// AccordionItem extends Widget</span>

<span class="nx">Y</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span> <span class="nx">AccordionItem</span><span class="o">,</span> <span class="nx">Y</span><span class="p">.</span><span class="nx">Widget</span><span class="o">,</span> <span class="p">{</span>

    <span class="c">/**</span>
<span class="c">     * Creates the header content</span>
<span class="c">     *</span>
<span class="c">     * @method _createHeader</span>
<span class="c">     * @protected</span>
<span class="c">     */</span>
    <span class="nx">_createHeader</span><span class="o">:</span> <span class="k">function</span><span class="p">(){</span>
        <span class="k">var</span> <span class="nx">closable</span><span class="o">,</span> <span class="nx">templates</span><span class="o">,</span> <span class="nx">strings</span><span class="o">,</span>  <span class="nx">iconsContainer</span><span class="o">,</span>
            <span class="nx">icon</span><span class="o">,</span> <span class="nx">nodeLabel</span><span class="o">,</span> <span class="nx">iconExpanded</span><span class="o">,</span> <span class="nx">iconAlwaysVisible</span><span class="o">,</span> <span class="nx">iconClose</span><span class="o">;</span>

        <span class="nx">icon</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span> <span class="nx">ICON</span> <span class="p">);</span>
        <span class="nx">nodeLabel</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span> <span class="nx">NODE_LABEL</span> <span class="p">);</span>
        <span class="nx">iconExpanded</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span> <span class="nx">ICON_EXPANDED</span> <span class="p">);</span>
        <span class="nx">iconAlwaysVisible</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span> <span class="nx">ICON_ALWAYSVISIBLE</span> <span class="p">);</span>
        <span class="nx">iconClose</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span> <span class="nx">ICON_CLOSE</span> <span class="p">);</span>
        <span class="nx">iconsContainer</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span> <span class="nx">ICONS_CONTAINER</span> <span class="p">);</span>
        
        <span class="nx">strings</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span> <span class="nx">STRINGS</span> <span class="p">);</span>
        <span class="nx">closable</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span> <span class="s2">&quot;closable&quot;</span> <span class="p">);</span>
        <span class="nx">templates</span> <span class="o">=</span> <span class="nx">AccordionItem</span><span class="p">.</span><span class="nx">TEMPLATES</span><span class="o">;</span>
        
        <span class="k">if</span><span class="p">(</span> <span class="o">!</span><span class="nx">icon</span> <span class="p">){</span>
            <span class="nx">icon</span> <span class="o">=</span> <span class="nx">Node</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span> <span class="nx">templates</span><span class="p">.</span><span class="nx">icon</span> <span class="p">);</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span> <span class="nx">ICON</span><span class="o">,</span> <span class="nx">icon</span> <span class="p">);</span>
        <span class="p">}</span>

        <span class="k">if</span><span class="p">(</span> <span class="o">!</span><span class="nx">nodeLabel</span> <span class="p">){</span>
            <span class="nx">nodeLabel</span> <span class="o">=</span> <span class="nx">Node</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span> <span class="nx">templates</span><span class="p">.</span><span class="k">label</span> <span class="p">);</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span> <span class="nx">NODE_LABEL</span><span class="o">,</span> <span class="nx">nodeLabel</span> <span class="p">);</span>
        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span><span class="p">(</span> <span class="o">!</span><span class="nx">nodeLabel</span><span class="p">.</span><span class="nx">hasAttribute</span><span class="p">(</span> <span class="nx">HREF</span> <span class="p">)</span> <span class="p">){</span>
            <span class="nx">nodeLabel</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span> <span class="nx">HREF</span><span class="o">,</span> <span class="nx">HREF_VALUE</span> <span class="p">);</span>
        <span class="p">}</span>

        <span class="nx">nodeLabel</span><span class="p">.</span><span class="nx">setContent</span><span class="p">(</span> <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span> <span class="s2">&quot;label&quot;</span> <span class="p">)</span> <span class="p">);</span>


        <span class="k">if</span><span class="p">(</span> <span class="o">!</span><span class="nx">iconsContainer</span> <span class="p">){</span>
            <span class="nx">iconsContainer</span> <span class="o">=</span> <span class="nx">Node</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span> <span class="nx">templates</span><span class="p">.</span><span class="nx">iconsContainer</span> <span class="p">);</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span> <span class="nx">ICONS_CONTAINER</span><span class="o">,</span> <span class="nx">iconsContainer</span> <span class="p">);</span>
        <span class="p">}</span>

        <span class="k">if</span><span class="p">(</span> <span class="o">!</span><span class="nx">iconAlwaysVisible</span> <span class="p">){</span>
            <span class="nx">iconAlwaysVisible</span> <span class="o">=</span> <span class="nx">Node</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span> <span class="nx">templates</span><span class="p">.</span><span class="nx">iconAlwaysVisible</span> <span class="p">);</span>
            <span class="nx">iconAlwaysVisible</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span> <span class="nx">TITLE</span><span class="o">,</span> <span class="nx">strings</span><span class="p">.</span><span class="nx">title_always_visible_off</span> <span class="p">);</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span> <span class="nx">ICON_ALWAYSVISIBLE</span><span class="o">,</span> <span class="nx">iconAlwaysVisible</span> <span class="p">);</span>
        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span><span class="p">(</span> <span class="o">!</span><span class="nx">iconAlwaysVisible</span><span class="p">.</span><span class="nx">hasAttribute</span><span class="p">(</span> <span class="nx">HREF</span> <span class="p">)</span> <span class="p">){</span>
            <span class="nx">iconAlwaysVisible</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span> <span class="nx">HREF</span><span class="o">,</span> <span class="nx">HREF_VALUE</span> <span class="p">);</span>
        <span class="p">}</span>

        
        <span class="k">if</span><span class="p">(</span> <span class="o">!</span><span class="nx">iconExpanded</span> <span class="p">){</span>
            <span class="nx">iconExpanded</span> <span class="o">=</span> <span class="nx">Node</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span> <span class="nx">templates</span><span class="p">.</span><span class="nx">iconExpanded</span> <span class="p">);</span>
            <span class="nx">iconExpanded</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span> <span class="nx">TITLE</span><span class="o">,</span> <span class="nx">strings</span><span class="p">.</span><span class="nx">title_iconexpanded_off</span> <span class="p">);</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span> <span class="nx">ICON_EXPANDED</span><span class="o">,</span> <span class="nx">iconExpanded</span> <span class="p">);</span>
        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span><span class="p">(</span> <span class="o">!</span><span class="nx">iconExpanded</span><span class="p">.</span><span class="nx">hasAttribute</span><span class="p">(</span> <span class="nx">HREF</span> <span class="p">)</span> <span class="p">){</span>
            <span class="nx">iconExpanded</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span> <span class="nx">HREF</span><span class="o">,</span> <span class="nx">HREF_VALUE</span> <span class="p">);</span>
        <span class="p">}</span>
        
        
        <span class="k">if</span><span class="p">(</span> <span class="o">!</span><span class="nx">iconClose</span> <span class="p">){</span>
            <span class="nx">iconClose</span> <span class="o">=</span> <span class="nx">Node</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span> <span class="nx">templates</span><span class="p">.</span><span class="nx">iconClose</span> <span class="p">);</span>
            <span class="nx">iconClose</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span> <span class="nx">TITLE</span><span class="o">,</span> <span class="nx">strings</span><span class="p">.</span><span class="nx">title_iconclose</span> <span class="p">);</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span> <span class="nx">ICON_CLOSE</span><span class="o">,</span> <span class="nx">iconClose</span> <span class="p">);</span>
        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span><span class="p">(</span> <span class="o">!</span><span class="nx">iconClose</span><span class="p">.</span><span class="nx">hasAttribute</span><span class="p">(</span> <span class="nx">HREF</span> <span class="p">)</span> <span class="p">){</span>
            <span class="nx">iconClose</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span> <span class="nx">HREF</span><span class="o">,</span> <span class="nx">HREF_VALUE</span> <span class="p">);</span>
        <span class="p">}</span>
        
        <span class="k">if</span><span class="p">(</span> <span class="nx">closable</span> <span class="p">){</span>
            <span class="nx">iconClose</span><span class="p">.</span><span class="nx">removeClass</span><span class="p">(</span> <span class="nx">C_ICONCLOSE_HIDDEN</span> <span class="p">);</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="nx">iconClose</span><span class="p">.</span><span class="nx">addClass</span><span class="p">(</span> <span class="nx">C_ICONCLOSE_HIDDEN</span> <span class="p">);</span>
        <span class="p">}</span>

        <span class="k">this</span><span class="p">.</span><span class="nx">_addHeaderComponents</span><span class="p">();</span>
    <span class="p">}</span><span class="o">,</span>

    <span class="c">/**</span>
<span class="c">     * Add label and icons in the header. Also, it creates header in if not set from markup</span>
<span class="c">     *</span>
<span class="c">     * @method _addHeaderComponents</span>
<span class="c">     * @protected</span>
<span class="c">     */</span>
    <span class="nx">_addHeaderComponents</span><span class="o">:</span> <span class="k">function</span><span class="p">(){</span>
        <span class="k">var</span> <span class="nx">header</span><span class="o">,</span> <span class="nx">icon</span><span class="o">,</span> <span class="nx">nodeLabel</span><span class="o">,</span> <span class="nx">iconsContainer</span><span class="o">,</span> <span class="nx">iconExpanded</span><span class="o">,</span>
            <span class="nx">iconAlwaysVisible</span><span class="o">,</span> <span class="nx">iconClose</span><span class="o">;</span>

        <span class="nx">icon</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span> <span class="nx">ICON</span> <span class="p">);</span>
        <span class="nx">nodeLabel</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span> <span class="nx">NODE_LABEL</span> <span class="p">);</span>
        <span class="nx">iconExpanded</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span> <span class="nx">ICON_EXPANDED</span> <span class="p">);</span>
        <span class="nx">iconAlwaysVisible</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span> <span class="nx">ICON_ALWAYSVISIBLE</span> <span class="p">);</span>
        <span class="nx">iconClose</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span> <span class="nx">ICON_CLOSE</span> <span class="p">);</span>
        <span class="nx">iconsContainer</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span> <span class="nx">ICONS_CONTAINER</span> <span class="p">);</span>

        <span class="nx">header</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span> <span class="nx">HEADER_CONTENT</span> <span class="p">);</span>

        <span class="k">if</span><span class="p">(</span> <span class="o">!</span><span class="nx">header</span> <span class="p">){</span>
            <span class="nx">header</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Node</span><span class="p">(</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createDocumentFragment</span><span class="p">()</span> <span class="p">);</span>
            <span class="nx">header</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span> <span class="nx">icon</span> <span class="p">);</span>
            <span class="nx">header</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span> <span class="nx">nodeLabel</span> <span class="p">);</span>
            <span class="nx">header</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span> <span class="nx">iconsContainer</span> <span class="p">);</span>
            <span class="nx">iconsContainer</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span> <span class="nx">iconAlwaysVisible</span> <span class="p">);</span>
            <span class="nx">iconsContainer</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span> <span class="nx">iconExpanded</span> <span class="p">);</span>
            <span class="nx">iconsContainer</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span> <span class="nx">iconClose</span> <span class="p">);</span>

            <span class="k">this</span><span class="p">.</span><span class="nx">setStdModContent</span><span class="p">(</span> <span class="nx">WidgetStdMod</span><span class="p">.</span><span class="nx">HEADER</span><span class="o">,</span> <span class="nx">header</span><span class="o">,</span> <span class="nx">WidgetStdMod</span><span class="p">.</span><span class="nx">REPLACE</span> <span class="p">);</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="k">if</span><span class="p">(</span> <span class="o">!</span><span class="nx">header</span><span class="p">.</span><span class="nx">contains</span><span class="p">(</span> <span class="nx">icon</span> <span class="p">)</span> <span class="p">){</span>
                <span class="k">if</span><span class="p">(</span> <span class="nx">header</span><span class="p">.</span><span class="nx">contains</span><span class="p">(</span> <span class="nx">nodeLabel</span> <span class="p">)</span> <span class="p">){</span>
                    <span class="nx">header</span><span class="p">.</span><span class="nx">insertBefore</span><span class="p">(</span> <span class="nx">icon</span><span class="o">,</span> <span class="nx">nodeLabel</span> <span class="p">);</span>
                <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                    <span class="nx">header</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span> <span class="nx">icon</span> <span class="p">);</span>
                <span class="p">}</span>
            <span class="p">}</span>

            <span class="k">if</span><span class="p">(</span> <span class="o">!</span><span class="nx">header</span><span class="p">.</span><span class="nx">contains</span><span class="p">(</span> <span class="nx">nodeLabel</span> <span class="p">)</span> <span class="p">){</span>
                <span class="nx">header</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span> <span class="nx">nodeLabel</span> <span class="p">);</span>
            <span class="p">}</span>

            <span class="k">if</span><span class="p">(</span> <span class="o">!</span><span class="nx">header</span><span class="p">.</span><span class="nx">contains</span><span class="p">(</span> <span class="nx">iconsContainer</span> <span class="p">)</span> <span class="p">){</span>
                <span class="nx">header</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span> <span class="nx">iconsContainer</span> <span class="p">);</span>
            <span class="p">}</span>

            <span class="k">if</span><span class="p">(</span> <span class="o">!</span><span class="nx">iconsContainer</span><span class="p">.</span><span class="nx">contains</span><span class="p">(</span> <span class="nx">iconAlwaysVisible</span> <span class="p">)</span> <span class="p">){</span>
                <span class="nx">iconsContainer</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span> <span class="nx">iconAlwaysVisible</span> <span class="p">);</span>
            <span class="p">}</span>

            <span class="k">if</span><span class="p">(</span> <span class="o">!</span><span class="nx">iconsContainer</span><span class="p">.</span><span class="nx">contains</span><span class="p">(</span> <span class="nx">iconExpanded</span> <span class="p">)</span> <span class="p">){</span>
                <span class="nx">iconsContainer</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span> <span class="nx">iconExpanded</span> <span class="p">);</span>
            <span class="p">}</span>

            <span class="k">if</span><span class="p">(</span> <span class="o">!</span><span class="nx">iconsContainer</span><span class="p">.</span><span class="nx">contains</span><span class="p">(</span> <span class="nx">iconClose</span> <span class="p">)</span> <span class="p">){</span>
                <span class="nx">iconsContainer</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span> <span class="nx">iconClose</span> <span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span><span class="o">,</span>


    <span class="c">/**</span>
<span class="c">     * Handles the change of &quot;labelChanged&quot; property. Updates item&#39;s UI with the label provided</span>
<span class="c">     * </span>
<span class="c">     * @method _labelChanged</span>
<span class="c">     * @protected</span>
<span class="c">     * @param {EventFacade} params The event facade for the attribute change</span>
<span class="c">     */</span>
    <span class="nx">_labelChanged</span><span class="o">:</span> <span class="k">function</span><span class="p">(</span> <span class="nx">params</span> <span class="p">){</span>
        <span class="k">var</span> <span class="k">label</span><span class="o">;</span>
        
        <span class="k">if</span><span class="p">(</span> <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span> <span class="nx">RENDERED</span> <span class="p">)</span> <span class="p">){</span>
            <span class="k">label</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span> <span class="nx">NODE_LABEL</span> <span class="p">);</span>
            <span class="k">label</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span> <span class="nx">INNER_HTML</span><span class="o">,</span> <span class="p">[</span><span class="s2">&quot;&lt;a href=&#39;#&#39;&gt;&quot;</span><span class="o">,</span> <span class="nx">params</span><span class="p">.</span><span class="nx">newVal</span><span class="o">,</span> <span class="s2">&quot;&lt;/a&gt;&quot;</span> <span class="p">].</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">)</span> <span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span><span class="o">,</span>


    <span class="c">/**</span>
<span class="c">     * Handles the change of &quot;closableChanged&quot; property. Hides or shows close icon</span>
<span class="c">     *</span>
<span class="c">     * @method _closableChanged</span>
<span class="c">     * @protected</span>
<span class="c">     * @param {EventFacade} params The event facade for the attribute change</span>
<span class="c">     */</span>
    <span class="nx">_closableChanged</span><span class="o">:</span> <span class="k">function</span><span class="p">(</span> <span class="nx">params</span> <span class="p">){</span>
        <span class="k">var</span> <span class="nx">selector</span><span class="o">,</span> <span class="nx">node</span><span class="o">,</span> <span class="nx">contentBox</span><span class="o">;</span>

        <span class="k">if</span><span class="p">(</span> <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span> <span class="nx">RENDERED</span> <span class="p">)</span> <span class="p">){</span>
            <span class="nx">contentBox</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span> <span class="nx">CONTENT_BOX</span> <span class="p">);</span>
        
            <span class="nx">selector</span> <span class="o">=</span> <span class="nx">HEADER_SELECTOR_SUB</span> <span class="o">+</span> <span class="nx">C_ICONCLOSE</span><span class="o">;</span>
            <span class="nx">node</span> <span class="o">=</span> <span class="nx">contentBox</span><span class="p">.</span><span class="nx">query</span><span class="p">(</span> <span class="nx">selector</span> <span class="p">);</span>

            <span class="k">if</span><span class="p">(</span> <span class="nx">params</span><span class="p">.</span><span class="nx">newVal</span> <span class="p">){</span>
                <span class="nx">node</span><span class="p">.</span><span class="nx">removeClass</span><span class="p">(</span> <span class="nx">C_ICONCLOSE_HIDDEN</span> <span class="p">);</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="nx">node</span><span class="p">.</span><span class="nx">addClass</span><span class="p">(</span> <span class="nx">C_ICONCLOSE_HIDDEN</span> <span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span><span class="o">,</span>


    <span class="c">/**</span>
<span class="c">     * Initializer lifecycle implementation for the AccordionItem class.</span>
<span class="c">     *</span>
<span class="c">     * @method initializer</span>
<span class="c">     * @protected</span>
<span class="c">     * @param  config {Object} Configuration object literal for the AccordionItem</span>
<span class="c">     */</span>
    <span class="nx">initializer</span><span class="o">:</span> <span class="k">function</span><span class="p">(</span> <span class="nx">config</span> <span class="p">)</span> <span class="p">{</span>

        <span class="k">this</span><span class="p">.</span><span class="nx">after</span><span class="p">(</span> <span class="s2">&quot;labelChange&quot;</span><span class="o">,</span>  <span class="nx">Y</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span> <span class="k">this</span><span class="p">.</span><span class="nx">_labelChanged</span><span class="o">,</span> <span class="k">this</span> <span class="p">)</span> <span class="p">);</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">after</span><span class="p">(</span> <span class="s2">&quot;closableChange&quot;</span><span class="o">,</span> <span class="nx">Y</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span> <span class="k">this</span><span class="p">.</span><span class="nx">_closableChanged</span><span class="o">,</span> <span class="k">this</span> <span class="p">)</span> <span class="p">);</span>
    <span class="p">}</span><span class="o">,</span>
    
    <span class="c">/**</span>
<span class="c">     * Destructor lifecycle implementation for the AccordionItem class.</span>
<span class="c">     *</span>
<span class="c">     * @method destructor</span>
<span class="c">     * @protected</span>
<span class="c">     */</span>
    <span class="nx">destructor</span> <span class="o">:</span> <span class="k">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="c">// EMPTY</span>
    <span class="p">}</span><span class="o">,</span>

    
    <span class="c">/**</span>
<span class="c">     * Creates AccordionItem&#39;s header.</span>
<span class="c">     * </span>
<span class="c">     * @method renderUI</span>
<span class="c">     * @protected</span>
<span class="c">     */</span>
    <span class="nx">renderUI</span><span class="o">:</span> <span class="k">function</span><span class="p">(){</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">_createHeader</span><span class="p">();</span>
    <span class="p">}</span><span class="o">,</span>
    
    <span class="c">/**</span>
<span class="c">     * Configures/Sets up listeners to bind Widget State to UI/DOM</span>
<span class="c">     *</span>
<span class="c">     * @method bindUI</span>
<span class="c">     * @protected</span>
<span class="c">     */</span>
    <span class="nx">bindUI</span><span class="o">:</span> <span class="k">function</span><span class="p">(){</span>
        <span class="k">var</span> <span class="nx">contentBox</span><span class="o">;</span>
        
        <span class="nx">contentBox</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span> <span class="nx">CONTENT_BOX</span> <span class="p">);</span>
        
        <span class="nx">contentBox</span><span class="p">.</span><span class="nx">delegate</span><span class="p">(</span> <span class="s2">&quot;click&quot;</span><span class="o">,</span> <span class="nx">Y</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span> <span class="k">this</span><span class="p">.</span><span class="nx">_onLinkClick</span><span class="o">,</span> <span class="k">this</span> <span class="p">)</span><span class="o">,</span> <span class="nx">HEADER_SELECTOR</span> <span class="o">+</span> <span class="s1">&#39; a&#39;</span> <span class="p">);</span>
    <span class="p">}</span><span class="o">,</span>



    <span class="c">/**</span>
<span class="c">     * Prevent default action on clicking the link in the label</span>
<span class="c">     *</span>
<span class="c">     * @method _onLinkClick</span>
<span class="c">     * @protected</span>
<span class="c">     *</span>
<span class="c">     * @param e {Event} The click event</span>
<span class="c">     */</span>
    <span class="nx">_onLinkClick</span><span class="o">:</span> <span class="k">function</span><span class="p">(</span> <span class="nx">e</span> <span class="p">){</span>
        <span class="nx">e</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span>
    <span class="p">}</span><span class="o">,</span>
    
   <span class="c">/**</span>
<span class="c">    * Marks the item as always visible by adding class to always visible icon.</span>
<span class="c">    * The icon will be updated only if needed.</span>
<span class="c">    * </span>
<span class="c">    * @method markAsAlwaysVisible</span>
<span class="c">    * @param {Boolean} alwaysVisible Whether or not the item should be marked as always visible</span>
<span class="c">    * @return Boolean Return true if the icon has been updated, false if there was no need to update</span>
<span class="c">    */</span>
    <span class="nx">markAsAlwaysVisible</span><span class="o">:</span> <span class="k">function</span><span class="p">(</span> <span class="nx">alwaysVisible</span> <span class="p">){</span>
        <span class="k">var</span> <span class="nx">iconAlwaysVisisble</span><span class="o">,</span> <span class="nx">strings</span><span class="o">;</span>

        <span class="nx">iconAlwaysVisisble</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span> <span class="nx">ICON_ALWAYSVISIBLE</span> <span class="p">);</span>
        <span class="nx">strings</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span> <span class="nx">STRINGS</span> <span class="p">);</span>

        <span class="k">if</span><span class="p">(</span> <span class="nx">alwaysVisible</span> <span class="p">){</span>
            <span class="k">if</span><span class="p">(</span> <span class="o">!</span><span class="nx">iconAlwaysVisisble</span><span class="p">.</span><span class="nx">hasClass</span><span class="p">(</span> <span class="nx">C_ICONALWAYSVISIBLE_ON</span> <span class="p">)</span> <span class="p">){</span>
                <span class="nx">iconAlwaysVisisble</span><span class="p">.</span><span class="nx">replaceClass</span><span class="p">(</span> <span class="nx">C_ICONALWAYSVISIBLE_OFF</span><span class="o">,</span> <span class="nx">C_ICONALWAYSVISIBLE_ON</span> <span class="p">);</span>
                <span class="nx">iconAlwaysVisisble</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span> <span class="nx">TITLE</span><span class="o">,</span> <span class="nx">strings</span><span class="p">.</span><span class="nx">title_always_visible_on</span> <span class="p">);</span>
                <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
            <span class="p">}</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="k">if</span><span class="p">(</span> <span class="nx">iconAlwaysVisisble</span><span class="p">.</span><span class="nx">hasClass</span><span class="p">(</span> <span class="nx">C_ICONALWAYSVISIBLE_ON</span> <span class="p">)</span> <span class="p">){</span>
                <span class="nx">iconAlwaysVisisble</span><span class="p">.</span><span class="nx">replaceClass</span><span class="p">(</span> <span class="nx">C_ICONALWAYSVISIBLE_ON</span><span class="o">,</span> <span class="nx">C_ICONALWAYSVISIBLE_OFF</span> <span class="p">);</span>
                <span class="nx">iconAlwaysVisisble</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span> <span class="nx">TITLE</span><span class="o">,</span> <span class="nx">strings</span><span class="p">.</span><span class="nx">title_always_visible_off</span> <span class="p">);</span>
                <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
        
        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
    <span class="p">}</span><span class="o">,</span>

    
    <span class="c">/**</span>
<span class="c">    * Marks the item as expanded by adding class to expand icon.</span>
<span class="c">    * The icon will be updated only if needed.</span>
<span class="c">    * </span>
<span class="c">    * @method markAsExpanded</span>
<span class="c">    * @param {Boolean} expanded Whether or not the item should be marked as expanded</span>
<span class="c">    * @return Boolean Return true if the icon has been updated, false if there was no need to update</span>
<span class="c">    */</span>
    <span class="nx">markAsExpanded</span><span class="o">:</span> <span class="k">function</span><span class="p">(</span> <span class="nx">expanded</span> <span class="p">){</span>
        <span class="k">var</span> <span class="nx">strings</span><span class="o">,</span> <span class="nx">iconExpanded</span><span class="o">;</span>
        
        <span class="nx">iconExpanded</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span> <span class="nx">ICON_EXPANDED</span> <span class="p">);</span>
        <span class="nx">strings</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span> <span class="nx">STRINGS</span> <span class="p">);</span>

        <span class="k">if</span><span class="p">(</span> <span class="nx">expanded</span> <span class="p">){</span>
            <span class="k">if</span><span class="p">(</span> <span class="o">!</span><span class="nx">iconExpanded</span><span class="p">.</span><span class="nx">hasClass</span><span class="p">(</span> <span class="nx">C_ICONEXPANDED_ON</span> <span class="p">)</span> <span class="p">){</span>
                <span class="nx">iconExpanded</span><span class="p">.</span><span class="nx">replaceClass</span><span class="p">(</span> <span class="nx">C_ICONEXPANDED_OFF</span><span class="o">,</span> <span class="nx">C_ICONEXPANDED_ON</span> <span class="p">);</span>
                <span class="nx">iconExpanded</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span> <span class="nx">TITLE</span> <span class="o">,</span> <span class="nx">strings</span><span class="p">.</span><span class="nx">title_iconexpanded_on</span> <span class="p">);</span>
                <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
            <span class="p">}</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="k">if</span><span class="p">(</span> <span class="nx">iconExpanded</span><span class="p">.</span><span class="nx">hasClass</span><span class="p">(</span> <span class="nx">C_ICONEXPANDED_ON</span> <span class="p">)</span> <span class="p">){</span>
                <span class="nx">iconExpanded</span><span class="p">.</span><span class="nx">replaceClass</span><span class="p">(</span> <span class="nx">C_ICONEXPANDED_ON</span><span class="o">,</span> <span class="nx">C_ICONEXPANDED_OFF</span> <span class="p">);</span>
                <span class="nx">iconExpanded</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span> <span class="nx">TITLE</span> <span class="o">,</span> <span class="nx">strings</span><span class="p">.</span><span class="nx">title_iconexpanded_off</span> <span class="p">);</span>
                <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
        
        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
    <span class="p">}</span><span class="o">,</span>

   
   <span class="c">/**</span>
<span class="c">    * Marks the item as expanding by adding class to expand icon.</span>
<span class="c">    * The method will update icon only if needed.</span>
<span class="c">    * </span>
<span class="c">    * @method markAsExpanding</span>
<span class="c">    * @param {Boolean} expanding Whether or not the item should be marked as expanding</span>
<span class="c">    * @return Boolean Return true if the icon has been updated, false if there was no need to update</span>
<span class="c">    */</span>
    <span class="nx">markAsExpanding</span><span class="o">:</span> <span class="k">function</span><span class="p">(</span> <span class="nx">expanding</span> <span class="p">){</span>
        <span class="k">var</span> <span class="nx">iconExpanded</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span> <span class="nx">ICON_EXPANDED</span> <span class="p">);</span>
        
        <span class="k">if</span><span class="p">(</span> <span class="nx">expanding</span> <span class="p">){</span>
            <span class="k">if</span><span class="p">(</span> <span class="o">!</span><span class="nx">iconExpanded</span><span class="p">.</span><span class="nx">hasClass</span><span class="p">(</span> <span class="nx">C_ICONEXPANDED_EXPANDING</span> <span class="p">)</span> <span class="p">){</span>
                <span class="nx">iconExpanded</span><span class="p">.</span><span class="nx">addClass</span><span class="p">(</span> <span class="nx">C_ICONEXPANDED_EXPANDING</span> <span class="p">);</span>
                <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
            <span class="p">}</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="k">if</span><span class="p">(</span> <span class="nx">iconExpanded</span><span class="p">.</span><span class="nx">hasClass</span><span class="p">(</span> <span class="nx">C_ICONEXPANDED_EXPANDING</span> <span class="p">)</span> <span class="p">){</span>
                <span class="nx">iconExpanded</span><span class="p">.</span><span class="nx">removeClass</span><span class="p">(</span> <span class="nx">C_ICONEXPANDED_EXPANDING</span> <span class="p">);</span>
                <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
        
        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
    <span class="p">}</span><span class="o">,</span>

    
   <span class="c">/**</span>
<span class="c">    * Marks the item as collapsing by adding class to expand icon.</span>
<span class="c">    * The method will update icon only if needed.</span>
<span class="c">    * </span>
<span class="c">    * @method markAsCollapsing</span>
<span class="c">    * @param {Boolean} collapsing Whether or not the item should be marked as collapsing</span>
<span class="c">    * @return Boolean Return true if the icon has been updated, false if there was no need to update</span>
<span class="c">    */</span>
    <span class="nx">markAsCollapsing</span><span class="o">:</span> <span class="k">function</span><span class="p">(</span> <span class="nx">collapsing</span> <span class="p">){</span>
        <span class="k">var</span> <span class="nx">iconExpanded</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span> <span class="nx">ICON_EXPANDED</span> <span class="p">);</span>

        <span class="k">if</span><span class="p">(</span> <span class="nx">collapsing</span> <span class="p">){</span>
            <span class="k">if</span><span class="p">(</span> <span class="o">!</span><span class="nx">iconExpanded</span><span class="p">.</span><span class="nx">hasClass</span><span class="p">(</span> <span class="nx">C_ICONEXPANDED_COLLAPSING</span> <span class="p">)</span> <span class="p">){</span>
                <span class="nx">iconExpanded</span><span class="p">.</span><span class="nx">addClass</span><span class="p">(</span> <span class="nx">C_ICONEXPANDED_COLLAPSING</span> <span class="p">);</span>
                <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
            <span class="p">}</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="k">if</span><span class="p">(</span> <span class="nx">iconExpanded</span><span class="p">.</span><span class="nx">hasClass</span><span class="p">(</span> <span class="nx">C_ICONEXPANDED_COLLAPSING</span> <span class="p">)</span> <span class="p">){</span>
                <span class="nx">iconExpanded</span><span class="p">.</span><span class="nx">removeClass</span><span class="p">(</span> <span class="nx">C_ICONEXPANDED_COLLAPSING</span> <span class="p">);</span>
                <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
        
        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
    <span class="p">}</span><span class="o">,</span>


    <span class="c">/**</span>
<span class="c">     * Parses and returns the yuiConfig attribute from contentBox. It must be stringified JSON object.</span>
<span class="c">     * This function will be replaced with more clever solution when YUI 3.1 becomes available</span>
<span class="c">     *</span>
<span class="c">     * @method _getConfigDOMAttribute</span>
<span class="c">     * @private</span>
<span class="c">     * @param {Node} contentBox Widget&#39;s contentBox</span>
<span class="c">     * @return {Object} The parsed yuiConfig value</span>
<span class="c">     */</span>
    <span class="nx">_getConfigDOMAttribute</span><span class="o">:</span> <span class="k">function</span><span class="p">(</span> <span class="nx">contentBox</span> <span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span><span class="p">(</span> <span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">_parsedCfg</span> <span class="p">){</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">_parsedCfg</span> <span class="o">=</span> <span class="nx">contentBox</span><span class="p">.</span><span class="nx">getAttribute</span><span class="p">(</span> <span class="nx">YUICONFIG</span> <span class="p">);</span>

            <span class="k">if</span><span class="p">(</span> <span class="k">this</span><span class="p">.</span><span class="nx">_parsedCfg</span> <span class="p">){</span>
                <span class="k">this</span><span class="p">.</span><span class="nx">_parsedCfg</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span> <span class="k">this</span><span class="p">.</span><span class="nx">_parsedCfg</span> <span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_parsedCfg</span><span class="o">;</span>
    <span class="p">}</span>
    
<span class="p">});</span>

<span class="c">// Add WidgetStdMod&#39;s functionality to AccordionItem</span>
<span class="nx">Base</span><span class="p">.</span><span class="nx">build</span><span class="p">(</span> <span class="nx">AccordionItem</span><span class="p">.</span><span class="nx">NAME</span><span class="o">,</span> <span class="nx">AccordionItem</span><span class="o">,</span> <span class="p">[</span> <span class="nx">WidgetStdMod</span> <span class="p">]</span><span class="o">,</span> <span class="p">{</span>
    <span class="nx">dynamic</span><span class="o">:</span> <span class="kc">false</span>
<span class="p">});</span>

<span class="nx">Y</span><span class="p">.</span><span class="nx">AccordionItem</span> <span class="o">=</span> <span class="nx">AccordionItem</span><span class="o">;</span>

<span class="p">}());</span>
</pre></div>
