{"majorversion": 3, "classmap": {"AccordionItem": {"name": "AccordionItem", "constructors": [{"params": [{"type": "Object", "name": "_config", "description": "  Object literal specifying AccordionItem configuration properties."}], "description": "Create an AccordionItem widget."}], "namespace": "", "module": "accordion", "events": {"iconChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "iconChange", "description": "Fires when the value for the configuration attribute 'icon' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "stringsChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "stringsChange", "description": "Fires when the value for the configuration attribute 'strings' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "iconAlwaysVisibleChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "iconAlwaysVisibleChange", "description": "Fires when the value for the configuration attribute 'iconAlwaysVisible' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "animationChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "animationChange", "description": "Fires when the value for the configuration attribute 'animation' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "closableChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "closableChange", "description": "Fires when the value for the configuration attribute 'closable' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "alwaysVisibleChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "alwaysVisibleChange", "description": "Fires when the value for the configuration attribute 'alwaysVisible' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "contentHeightChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "contentHeightChange", "description": "Fires when the value for the configuration attribute 'contentHeight' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "labelChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "labelChange", "description": "Fires when the value for the configuration attribute 'label' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "iconCloseChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "iconCloseChange", "description": "Fires when the value for the configuration attribute 'iconClose' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "expandedChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "expandedChange", "description": "Fires when the value for the configuration attribute 'expanded' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "iconExtendedChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "iconExtendedChange", "description": "Fires when the value for the configuration attribute 'iconExtended' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "configs": {"iconExtended": {"description": "Icon extended", "default": "null", "readonly": "", "guessedname": "iconExtended", "guessedtype": "property", "type": "Node"}, "closable": {"default": "false", "type": "Boolean", "description": "Flag, indicated whether the item can be closed by user, or not\nIf yes, there will be placed close icon, otherwise not", "guessedname": "closable", "guessedtype": "property"}, "expanded": {"default": "false", "type": "Boolean", "description": "Get/Set the expanded status of the item", "guessedname": "expanded", "guessedtype": "property"}, "label": {"default": "\"&#160;\"", "type": "String", "description": "The label of the item", "guessedname": "label", "guessedtype": "property"}, "animation": {"default": "{}", "type": "Object", "description": "Get/Set the animaton specific settings. By default there are no any settings.\nIf set, they will overwrite Accordion's animation settings", "guessedname": "animation", "guessedtype": "property"}, "iconAlwaysVisible": {"description": "Icon always visible", "default": "null", "readonly": "", "guessedname": "iconAlwaysVisible", "guessedtype": "property", "type": "Node"}, "contentHeight": {"default": "auto", "type": "Object", "description": "Describe the method, which will be used when expanding/collapsing\nthe item. The value should be an object with at least one property (\"method\"):\n<dl>\n<dt>method</dt>\n<dd>The method can be one of these: \"auto\", \"fixed\" and \"stretch\"</dd>\n<dt>height</dt>\n<dd>Must be set only if method's value is \"fixed\"</dd>\n</dl>", "guessedname": "contentHeight", "guessedtype": "property"}, "iconClose": {"description": "Icon close, or null if the item is not closable", "default": "null", "readonly": "", "guessedname": "iconClose", "guessedtype": "property", "type": "Node"}, "strings": {"default": "Object English messages", "type": "Object", "description": "Provides client side string localization support.", "guessedname": "strings", "guessedtype": "property"}, "alwaysVisible": {"default": "false", "type": "Boolean", "description": "Get/Set the expanded status of the item", "guessedname": "alwaysVisible", "guessedtype": "property"}, "icon": {"default": "\"default\"", "type": "String", "description": "The icon of the item. The value can be one of these:\n<dl>\n<dt>default</dt>\n<dd>The AccordionItem will use the default icon</dd>\n<dt>Custom class name</dt>\n<dd>A custom class to be added to icon's classes</dd>\n</dl>", "guessedname": "icon", "guessedtype": "property"}}, "methods": {"_closableChanged": {"protected": "", "params": [{"type": "EventFacade", "name": "_params", "description": " The event facade for the attribute change"}], "description": "Handles the change of \"closableChanged\" property. Hides or shows close icon", "guessedname": "_closableChanged", "guessedtype": "function"}, "markAsCollapsing": {"return": {"type": "", "description": "Boolean Return true if the icon has been updated, false if there was no need to update"}, "params": [{"type": "Boolean", "name": "_collapsing", "description": " Whether or not the item should be marked as collapsing"}], "description": "Marks the item as collapsing by adding class to expand icon.\nThe method will update icon only if needed.", "guessedname": "markAsCollapsing", "guessedtype": "function"}, "_createHeader": {"protected": "", "description": "Creates the header content of an AccordionItem", "guessedname": "_createHeader", "guessedtype": "function"}, "markAsExpanding": {"return": {"type": "", "description": "Boolean Return true if the icon has been updated, false if there was no need to update"}, "params": [{"type": "Boolean", "name": "_expanding", "description": " Whether or not the item should be marked as expanding"}], "description": "Marks the item as expanding by adding class to expand icon.\nThe method will update icon only if needed.", "guessedname": "markAsExpanding", "guessedtype": "function"}, "destructor": {"protected": "", "description": "Destructor lifecycle implementation for the AccordionItem class.", "guessedname": "destructor", "guessedtype": "function"}, "markAsExpanded": {"return": {"type": "", "description": "Boolean Return true if the icon has been updated, false if there was no need to update"}, "params": [{"type": "Boolean", "name": "_expanded", "description": " Whether or not the item should be marked as expanded"}], "description": "Marks the item as expanded by adding class to expand icon.\nThe icon will be updated only if needed.", "guessedname": "markAsExpanded", "guessedtype": "function"}, "_labelChanged": {"protected": "", "params": [{"type": "EventFacade", "name": "_params", "description": " The event facade for the attribute change"}], "description": "Handles the change of \"labelChanged\" property. Updates item's UI with the label provided", "guessedname": "_labelChanged", "guessedtype": "function"}, "markAsAlwaysVisible": {"return": {"type": "", "description": "Boolean Return true if the icon has been updated, false if there was no need to update"}, "params": [{"type": "Boolean", "name": "_alwaysVisible", "description": " Whether or not the item should be marked as always visible"}], "description": "Marks the item as always visible by adding class to always visible icon.\nThe icon will be updated only if needed.", "guessedname": "markAsAlwaysVisible", "guessedtype": "function"}, "_iconChanged": {"protected": "", "params": [{"type": "EventFacade", "name": "_params", "description": " The event facade for the attribute change"}], "description": "Handles the change of \"iconChanged\" property. Set custom or default class for the icon", "guessedname": "_iconChanged", "guessedtype": "function"}, "initializer": {"protected": "", "params": [{"type": "Object", "name": "_config", "description": "  Configuration object literal for the AccordionItem"}], "description": "Initializer lifecycle implementation for the AccordionItem class.", "guessedname": "initializer", "guessedtype": "function"}, "renderUI": {"protected": "", "description": "Creates AccordionItem's header.", "guessedname": "renderUI", "guessedtype": "function"}}, "extends": "Widget", "superclass": "Widget", "file": "accordion-item.js", "shortname": "AccordionItem", "properties": {"AccordionItem.NAME": {"type": "String", "static": "", "description": "Static property provides a string to identify the class.", "guessedname": "NAME", "guessedtype": "property"}, "Accordion.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute \nconfiguration for the Accordion.", "guessedname": "ATTRS", "guessedtype": "property"}, "AccordionItem.HTML_PARSER": {"description": "Static Object hash used to capture existing markup for progressive\nenhancement.  Keys correspond to config attribute names and values\nare selectors used to inspect the contentBox for an existing node\nstructure.", "protected": "", "static": "", "guessedname": "HTML_PARSER", "guessedtype": "property", "type": "Object"}}, "description": "Create an AccordionItem widget."}, "Accordion": {"name": "Accordion", "constructors": [{"params": [{"type": "Object", "name": "_config", "description": "  Object literal specifying Accordion configuration properties."}], "description": "Accordion creates an widget, consists of one or more items, which can be collapsed, expanded,\nset as always visible and reordered by using Drag&Drop. Collapsing/expanding might be animated."}], "namespace": "", "module": "accordion", "events": {"animationChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "animationChange", "description": "Fires when the value for the configuration attribute 'animation' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "collapseOthersOnExpandChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "collapseOthersOnExpandChange", "description": "Fires when the value for the configuration attribute 'collapseOthersOnExpand' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "beforeItemRemove": {"params": [{"type": "Event.Facade", "name": "event", "description": "  An Event Facade object with the following attribute specific properties added:\n<dl>\n<dt>item</dt>\n<dd>An <code>AccordionItem</code> instance of the item being removed</dd>\n</dl>"}], "description": "Signals the beginning of removing an item."}, "beforeItemReorder": {"params": [{"type": "Event.Facade", "name": "event", "description": "  An Event Facade object with the following attribute specific properties added:\n<dl>\n<dt>item</dt>\n<dd>An <code>AccordionItem</code> instance of the item being reordered</dd>\n</dl>"}], "description": "Signals the beginning of reordering an item"}, "itemsChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "itemsChange", "description": "Fires when the value for the configuration attribute 'items' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "itemResized": {"params": [{"type": "Event.Facade", "name": "event", "description": "  An Event Facade object with the following attribute specific properties added:\n<dl>\n<dt>item</dt>\n<dd>An <code>AccordionItem</code> instance of the item that has been resized</dd>\n</dl>"}], "description": "Signals an item has been resized."}, "useAnimationChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "useAnimationChange", "description": "Fires when the value for the configuration attribute 'useAnimation' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "beforeEndItemReorder": {"params": [{"type": "Event.Facade", "name": "event", "description": "  An Event Facade object with the following attribute specific properties added:\n<dl>\n<dt>item</dt>\n<dd>An <code>AccordionItem</code> instance of the item being reordered</dd>\n</dl>"}], "description": "Fires before the end of item reordering"}, "itemChosenChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "itemChosenChange", "description": "Fires when the value for the configuration attribute 'itemChosen' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "beforeItemAdd": {"params": [{"type": "Event.Facade", "name": "event", "description": "  An Event Facade object with the following attribute specific properties added:\n<dl>\n<dt>item</dt>\n<dd>An <code>AccordionItem</code> instance of the item being added</dd>\n</dl>"}], "description": "Signals the beginning of adding an item to the Accordion."}, "beforeItemResized": {"params": [{"type": "Event.Facade", "name": "event", "description": "  An Event Facade object with the following attribute specific properties added:\n<dl>\n<dt>item</dt>\n<dd>An <code>AccordionItem</code> instance of the item being resized</dd>\n</dl>"}], "description": "Signals the beginning of resizing an item."}, "itemReordered": {"params": [{"type": "Event.Facade", "name": "event", "description": "  An Event Facade object with the following attribute specific properties added:\n<dl>\n<dt>item</dt>\n<dd>An <code>AccordionItem</code> instance of the item that has been reordered</dd>\n</dl>"}], "description": "Signals an item has been reordered"}, "beforeItemCollapse": {"params": [{"type": "Event.Facade", "name": "event", "description": "  An Event Facade object with the following attribute specific properties added:\n<dl>\n<dt>item</dt>\n<dd>An <code>AccordionItem</code> instance of the item being collapsed</dd>\n</dl>"}], "description": "Signals the beginning of collapsing an item"}, "beforeItemExpand": {"params": [{"type": "Event.Facade", "name": "event", "description": "  An Event Facade object with the following attribute specific properties added:\n<dl>\n<dt>item</dt>\n<dd>An <code>AccordionItem</code> instance of the item being expanded</dd>\n</dl>"}], "description": "Signals the beginning of expanding an item"}, "reorderItemsChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "reorderItemsChange", "description": "Fires when the value for the configuration attribute 'reorderItems' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "itemExpanded": {"params": [{"type": "Event.Facade", "name": "event", "description": "  An Event Facade object with the following attribute specific properties added:\n<dl>\n<dt>item</dt>\n<dd>An <code>AccordionItem</code> instance of the item that has been expanded</dd>\n</dl>"}], "description": "Signals an item has been expanded"}, "resizeEventChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "resizeEventChange", "description": "Fires when the value for the configuration attribute 'resizeEvent' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "itemRemoved": {"params": [{"type": "Event.Facade", "name": "event", "description": "  An Event Facade object with the following attribute specific properties added:\n<dl>\n<dt>item</dt>\n<dd>An <code>AccordionItem</code> instance of the item that has been removed</dd>\n</dl>"}], "description": "Signals an item has been removed from Accordion."}, "itemCollapsed": {"params": [{"type": "Event.Facade", "name": "event", "description": "  An Event Facade object with the following attribute specific properties added:\n<dl>\n<dt>item</dt>\n<dd>An <code>AccordionItem</code> instance of the item that has been collapsed</dd>\n</dl>"}], "description": "Signals an item has been collapsed"}, "itemAdded": {"params": [{"type": "Event.Facade", "name": "event", "description": "  An Event Facade object with the following attribute specific properties added:\n<dl>\n<dt>item</dt>\n<dd>An <code>AccordionItem</code> instance of the item that has been added</dd>\n</dl>"}], "description": "Signals an item has been added to the Accordion."}}, "configs": {"reorderItems": {"default": "true", "type": "boolean", "description": "Whether or not the items in Accordion can be reordered by using drag&drop", "guessedname": "reorderItems", "guessedtype": "property"}, "items": {"description": "Contains the items, currently added to Accordion", "default": "[]", "readonly": "", "guessedname": "items", "guessedtype": "property", "type": "Array"}, "itemChosen": {"default": "click", "type": "String", "description": "The event on which Accordion should listen for user interactions.\nThe value can be also mousedown or mouseup. Mousedown event can be used if\ndrag&drop is not enabled", "guessedname": "itemChosen", "guessedtype": "property"}, "animation": {"default": "<code> {\nduration: 1, \neasing: Easing.easeOutStrong\n}\n</code>", "type": "Object", "description": "Animation config values, see Y.Animation", "guessedname": "animation", "guessedtype": "property"}, "useAnimation": {"default": ": true", "type": "boolean", "description": "Whether or not Accordion should use animation when expand or collapse some item\nThe animation in Accordion is slow in IE6", "guessedname": "useAnimation", "guessedtype": "property"}, "collapseOthersOnExpand": {"default": "true", "type": "Boolean", "description": "If true, on item expanding, all other expanded and not set as always visible items, will be collapsed\nOtherwise, they will stay open", "guessedname": "collapseOthersOnExpand", "guessedtype": "property"}, "resizeEvent": {"default": "\"default\"", "type": "String or Object, see the description above", "description": "The event on which Accordion should listen for resizing.\nThe value must be one of these:\n<ul>\n<li> String \"default\" - the Accordion will subscribe to Y.windowresize event\n</li>\n<li> An object in the following form: \n{\nsourceObject: some_javascript_object,\nresizeEvent: an_event_to_subscribe\n}\n</li>\n</ul>\nFor example, if we are using LayoutManager's instance as sourceObject, we will have to use its \"resize\" event as resizeEvent", "guessedname": "resizeEvent", "guessedtype": "property"}}, "methods": {"_initItemDragDrop": {"protected": "", "params": [{"type": "Y.AccordionItem", "name": "_item", "description": " An <code>Y.AccordionItem</code> instance to be set as draggable"}], "description": "Make an item draggable. The item can be reordered later.", "guessedname": "_initItemDragDrop", "guessedtype": "function"}, "_initEvents": {"protected": "", "description": "Publishes Accordion's events", "guessedname": "_initEvents", "guessedtype": "function"}, "_adjustStretchItems": {"protected": "", "return": {"type": "Number", "description": "The calculated height per strech item"}, "description": "Helper method to adjust the height of all items, which <code>contentHeight</code> property is set as \"stretch\".\nIf some item has animation running, it will be stopped before running another one.", "guessedname": "_adjustStretchItems", "guessedtype": "function"}, "_processItems": {"protected": "", "description": "Process items as result of user interaction or properties change.\nThis includes four steps:\n1. Update the properties of the items\n2. Collapse all items stored in the list for collapsing\n3. Adjust all stretch items\n4. Expand items stored in the list for expanding", "guessedname": "_processItems", "guessedtype": "function"}, "_getItemContentHeight": {"return": {"type": "Number", "description": "The calculated item's height"}, "description": "Calculates the height of given item depending on its \"contentHeight\" property.", "protected": "", "params": [{"type": "Y.AccordionItem", "name": "The", "description": " item, which height should be calculated"}], "guessedname": "_getItemContentHeight", "guessedtype": "function"}, "_expandItem": {"protected": "", "params": [{"type": "Y.AccordionItem", "name": "_item", "description": " The item, which should be expanded"}, {"type": "Number", "name": "_height", "description": " The height to which we should expand the item"}], "description": "Expands an item to given height. This includes also an update to item's user interface", "guessedname": "_expandItem", "guessedtype": "function"}, "initializer": {"protected": "", "params": [{"type": "Object", "name": "_config", "description": "  Configuration object literal for the Accordion"}], "description": "Initializer lifecycle implementation for the Accordion class. Publishes events,\ninitializes internal properties and subscribes for resize event.", "guessedname": "initializer", "guessedtype": "function"}, "_setItemProperties": {"protected": "", "params": [{"type": "Y.AccordionItem", "name": "_item", "description": " The item, which properties should be updated"}, {"type": "boolean", "name": "_expanding", "description": " The new value of \"expanded\" property"}, {"type": "boolean", "name": "_alwaysVisible", "description": " The new value of \"alwaysVisible\" property"}], "description": "Updates expand and alwaysVisible properties of given item with the values provided.\nThe properties will be updated only if needed.", "guessedname": "_setItemProperties", "guessedtype": "function"}, "destructor": {"protected": "", "description": "Destructor lifecycle implementation for the Accordion class.\nRemoves and destroys all registered items.", "guessedname": "destructor", "guessedtype": "function"}, "_getHeightPerStretchItem": {"protected": "", "return": {"type": "Number", "description": "The calculated height per strech item"}, "description": "Calculates the height per strech item.", "guessedname": "_getHeightPerStretchItem", "guessedtype": "function"}, "_onItemChosen": {"protected": "", "params": [{"type": "Y.AccordionItem", "name": "_item", "description": "  The item on which user has clicked or pressed key"}, {"type": "Boolean", "name": "_item", "description": "  True if the user has clicked on always visible icon"}, {"type": "Boolean", "name": "_item", "description": "  True if the user has clicked on close icon"}], "description": "Distributes the involved items as result of user interaction on item header.\nSome items might be stored in the list for collapsing, other in the list for expanding. \nFinally, invokes <code>_processItems</code> function, except if item has been expanded and\nuser has clicked on always visible icon.\nIf the user clicked on close icon, the item will be closed.", "guessedname": "_onItemChosen", "guessedtype": "function"}, "_collapseItem": {"protected": "", "params": [{"type": "Y.AccordionItem", "name": "_item", "description": " The item, which should be collapsed"}], "description": "Collapse an item and update its user interface", "guessedname": "_collapseItem", "guessedtype": "function"}, "_processExpanding": {"protected": "", "params": [{"type": "Y.AccordionItem", "name": "_item", "description": " An <code>Y.AccordionItem</code> instance to be expanded"}, {"type": "Boolean", "name": "_forceSkipAnimation", "description": " If true, the animation will be skipped, \nwithout taking in consideration Accordion's <code>useAnimation</code> setting"}, {"type": "Number", "name": "_height", "description": " The height to which item should be expanded"}], "description": "Expands an item to given height. Depending on the <code>useAnimation</code> setting, \nthe process of expanding might be animated. This setting will be ignored, if <code>_forceSkipAnimation</code> param\nis <code>true</code>.", "guessedname": "_processExpanding", "guessedtype": "function"}, "_setItemUI": {"protected": "", "params": [{"type": "Y.AccordionItem", "name": "_item", "description": " The item, which user interface should be updated"}, {"type": "boolean", "name": "_expanding", "description": " If true, the item will be marked as expanded.\nIf false, the item will be marked as collapsed"}, {"type": "boolean", "name": "_alwaysVisible", "description": " If true, the item will be marked as always visible.\nIf false, the always visible mark will be removed"}], "description": "Updates user interface of an item and marks it as expanded, alwaysVisible or both", "guessedname": "_setItemUI", "guessedtype": "function"}, "bindUI": {"protected": "", "description": "Add listener to <code>itemChosen</code> and <code>keypress</code> events in Accordion's content box", "guessedname": "bindUI", "guessedtype": "function"}, "_afterItemExpand": {"protected": "", "params": [{"type": "EventFacade", "name": "_params", "description": " The event facade for the attribute change"}], "description": "Handles the change of \"expand\" property of given item", "guessedname": "_afterItemExpand", "guessedtype": "function"}, "_afterContentHeight": {"protected": "", "params": [{"type": "EventFacade", "name": "_params", "description": " The event facade for the attribute change"}], "description": "Handles the change of \"contentHeight\" property of given item", "guessedname": "_afterContentHeight", "guessedtype": "function"}, "_setUpResizing": {"protected": "", "params": [{"type": "String|Object", "name": "String", "description": " \"default\" or object with the following properties:\n<dl>\n<dt>sourceObject</dt>\n<dd>An abbitrary object</dd>\n<dt>resizeEvent</dt>\n<dd>The name of its resize event</dd>\n</dl>"}], "description": "Subscribe for resize event, which could be provided from the browser or from an arbitrary object.\nFor example, if there is LayoutManager in the page, it is preferable to subscribe to its resize event,\ninstead to those, which browser provides.", "guessedname": "_setUpResizing", "guessedtype": "function"}, "addItem": {"return": {"type": "", "description": "Boolean True in case of successfully added item, false otherwise"}, "params": [{"type": "Y.AccordionItem", "name": "_item", "description": " The item to be added in Accordion"}, {"type": "Y.AccordionItem", "name": "_parentItem", "description": " (optional) This item will be the parent of the item being added"}], "description": "Add an item to Accordion. Items could be added/removed multiple times and they\nwill be rendered in the process of adding, if not.\nThe item will be expanded, collapsed, or set as always visible depending on the \nsettings. Item's properties will be also updated, if they are incomplete.\nFor example, if <code>alwaysVisible</code> is true, but <code>expanded</code>\nproperty is false, it will be set to true also.\nIf the second param, <code>_parentItem</code> is an <code>Y.AccordionItem</code> instance,\nregistered in Accordion, the item will be added as child of the <code>_parentItem</code>", "guessedname": "addItem", "guessedtype": "function"}, "_afterItemAlwaysVisible": {"protected": "", "params": [{"type": "EventFacade", "name": "_params", "description": " The event facade for the attribute change"}], "description": "Handles the change of \"alwaysVisible\" property of given item", "guessedname": "_afterItemAlwaysVisible", "guessedtype": "function"}, "getItem": {"return": {"type": "", "description": "Y.AccordionItem The found item or null"}, "params": [{"type": "Number|Y.Node", "name": "_param", "description": " If number, this must be item's index.\nIf Node, it should be the value of item's <code>contentBox</code> or <code>boundingBox</code> properties"}], "description": "Searching for item, previously registered in Accordion", "guessedname": "getItem", "guessedtype": "function"}, "removeItem": {"return": {"type": "", "description": "Y.AccordionItem The removed item or null if not found"}, "params": [{"type": "Y.AccordionItem|Number", "name": "p_item", "description": " The item to be removed, or its index"}], "description": "Removes an previously registered item in Accordion", "guessedname": "removeItem", "guessedtype": "function"}, "_processCollapsing": {"protected": "", "params": [{"type": "Y.AccordionItem", "name": "_item", "description": " An <code>Y.AccordionItem</code> instance to be collapsed"}, {"type": "Number", "name": "_height", "description": " The height to which item should be collapsed"}, {"type": "Boolean", "name": "_forceSkipAnimation", "description": " If true, the animation will be skipped, \nwithout taking in consideration Accordion's <code>useAnimation</code> setting"}], "description": "Collapse an item to given height. Depending on the <code>useAnimation</code> setting, \nthe process of collapsing might be animated. This setting will be ignored, if <code>_forceSkipAnimation</code> param\nis <code>true</code>.", "guessedname": "_processCollapsing", "guessedtype": "function"}, "_getNodeOffsetHeight": {"return": {"type": "Number", "description": "The calculated height or zero in case of failure"}, "description": "Obtains the precise height of the node provided, including padding and border.", "protected": "", "params": [{"type": "Node|HTMLElement", "name": "p_node", "description": " The node to gather the height from"}], "guessedname": "_getNodeOffsetHeight", "guessedtype": "function"}, "_setItemsProperties": {"protected": "", "description": "Update properties of items, which were stored in the lists for collapsing or expanding", "guessedname": "_setItemsProperties", "guessedtype": "function"}, "getItemIndex": {"return": {"type": "", "description": "Number Item index or <code>-1</code> if item has been not found"}, "params": [{"type": "Y.AccordionItem", "name": "_item", "description": " The item which index should be returned"}], "description": "Looking for the index of previously registered item", "guessedname": "getItemIndex", "guessedtype": "function"}, "_removeItemHandles": {"protected": "", "params": [{"type": "Y.AccordionItem", "name": "_item", "description": " The item, which handles to remove"}], "description": "Removes all handles, attched to given item", "guessedname": "_removeItemHandles", "guessedtype": "function"}, "_storeItemsForCollapsing": {"protected": "", "params": [{"type": "Object", "name": "_itemsToBeExcluded", "description": " (optional) Contains one or more <code>Y.AccordionItem</code> instances,\nwhich should be not included in the list"}], "description": "Stores all items, which are expanded and not set as always visible in list\nin order to be collapsed later.", "guessedname": "_storeItemsForCollapsing", "guessedtype": "function"}, "renderUI": {"protected": "", "description": "Creates one or more items found in Accordion's <code>contentBox</code>", "guessedname": "renderUI", "guessedtype": "function"}}, "extends": "Widget", "superclass": "Widget", "file": "accordion.js", "shortname": "Accordion", "properties": {"Accordion.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute \nconfiguration for the Accordion.", "guessedname": "ATTRS", "guessedtype": "property"}, "_itemHandles": {"guessedname": "_itemsHandles", "type": "Array", "description": "Collection of items handles.\nKeeps track of each items's event handle, as returned from <code>Y.on</code> or <code>Y.after</code>.", "private": "", "guessedtype": "property"}, "Accordion.C_PROXY_VISIBLE": {"type": "String", "static": "", "description": "Static property to indicate class which will be applied to dd proxy when item is being reordered", "guessedname": "C_PROXY_VISIBLE", "guessedtype": "property"}, "Accordion.NAME": {"type": "String", "static": "", "description": "Static property provides a string to identify the class.", "guessedname": "NAME", "guessedtype": "property"}, "Accordion.DRAGGROUP": {"type": "String", "static": "", "description": "Static property, which contains the drag group for Accordion and its items", "guessedname": "DRAGGROUP", "guessedtype": "property"}, "Accordion.EVENT_TYPES": {"type": "Object", "static": "", "description": "Static property; contains the events, which Accordion publishes", "guessedname": "EVENT_TYPES", "guessedtype": "property"}}, "description": "Accordion creates an widget, consists of one or more items, which can be collapsed, expanded,\nset as always visible and reordered by using Drag&Drop. Collapsing/expanding might be animated."}}, "version": "1.01", "modules": {"accordion": {"description": "Provides the Accordion class", "submodules": [], "classlist": ["Accordion", "AccordionItem"], "filelist": ["accordion.js", "accordion-item.js"], "subdata": {}, "name": "accordion"}}, "filemap": {"accordion-item.js": {"classlist": ["AccordionItem"], "name": "accordion-item.js", "module": "accordion"}, "accordion.js": {"classlist": ["Accordion"], "name": "accordion.js", "module": "accordion"}}}